# acceptance tests for modMine, metadata

#results-report {
#  sql: select taxonid, name from organism
#}

results-report {
  sql: SELECT s.title, substring(lsf.class from '%.#"%#"' for '#') as feature, COUNT(*) FROM LocatedSequenceFeature AS lsf, submission s, bioentitiesdatasets bd where lsf.id = bd.bioentities and s.id = bd.datasets and lsf.class not like '%Chromosome' GROUP BY s.title, lsf.class ORDER BY s.title, lsf.class;
 max-results: 200
}

results-report {
  sql: select substring(class,25), count(*) from intermineobject group by class; 
 max-results: 200
}

some-results {
  sql: select name, taxonid from organism where taxonid = '7227' or taxonid = '6239'
  note: we only want either D. melanogaster (7227) or C. elegans (6239) organisms.
}

some-results {
  sql: select name from organism
  note: we want at least 1 organism.
}


some-results {
  sql: select title from submission
  note: we want at least 1 submission.
}

no-results {
  sql: SELECT distinct title from submission where title not in ( SELECT distinct s.title FROM LocatedSequenceFeature AS lsf, submission s, bioentitiesdatasets bd where lsf.id = bd.datasets and s.id = bd.bioentities and lsf.class not like '%Chromosome')
  note: All submissions should have features.
}

no-results {
sql: SELECT s.title, substring(lsf.class from '%.#"%#"' for '#') as feature, COUNT(*) FROM LocatedSequenceFeature AS lsf, submission s, bioentitiesdatasets bd where lsf.id = bd.datasets and s.id = bd.bioentities and lsf.class not like '%Chromosome' and lsf.chromosomelocationid is null GROUP BY s.title, lsf.class ORDER BY s.title, lsf.class;
note: All features should be located on a chromosome.
}

no-results {
  sql: select * from organism where genus is null or species is null or shortname is null or name is null or taxonid is null
  note: all fields of all organisms should be filled in
}
no-results {
  sql: select * from datasource where url is null or name is null;
  note: url and name of data source should be filled in
}

no-results {
  sql: select l1.id, l1.intermine_start, l2.id, l2.intermine_end from location as l1, location as l2 where l1.subjectid = l2.subjectid and l1.objectid = l2.objectid and l1.intermine_start = l2.intermine_start and l1.intermine_end = l2.intermine_end and l1.id <> l2.id
  note: no two location objects should have the same objectid, subjectid, start and end positions
}
no-results {
  sql: select * from bioentity where primaryidentifier is null
  note: we should not have null primaryidentifier
}
no-results {
  sql: select primaryidentifier, count(*) from bioentity group by primaryidentifier having count(*) > 1
  note: There should be no duplicate primaryidentifier..
}

no-results {
  sql: select lsf.id, lsf.primaryidentifier, intermine_sequence.id from locatedsequencefeature as lsf, intermine_sequence where intermine_sequence.id = sequenceid and length(intermine_sequence.residues) <> lsf.length
  note: LocatedSequenceFeature.length should equal the length of the Sequence.residues (see #669)
}
no-results {
  sql: select lsf.id, lsf.primaryidentifier, lsf.length, seq.id, seq.length from locatedsequencefeature as lsf, intermine_sequence as seq where lsf.sequenceid = seq.id and lsf.length != seq.length
  note: LocatedSequenceFeature.length should equal the length of the Sequence.length (see #669)
}
no-results {
  sql: select id, length from intermine_sequence where length <= 0;
  note: Sequence.length should be greater than 0
}
no-results {
  sql: select subjectid, type, intermine_value, count(*) from synonym group by subjectid, type, intermine_value having count(*) > 1
  note: If synonym key used correctly for all sources there should be no duplicate synonyms
}
no-results {
  sql: select * from intermineobject where id in (select b.id from bioentity b where b.primaryidentifier is not null and not exists (select * from synonym s where s.intermine_value = b.primaryidentifier and s.subjectid = b.id)) limit 100
  note: all BioEntities should have their primaryidentifier as a synonym
}


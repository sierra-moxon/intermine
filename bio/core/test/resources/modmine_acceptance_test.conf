# acceptance tests for modMine

assert {
  sql: select count(*) = 2 from organism;
}
some-results {
  sql: select * from submission;
  note: we want at least 1 submission.
}
assert {
  sql: select count(*) > 10 from bioentity where class not like '%Chromosome' 
 note: a featureless submission is suspicious.
}
no-results {
  sql: select * from organism where genus is null or species is null or abbreviation is null or shortname is null or name is null or taxonid is null
  note: all fields of all organisms should be filled in
}
no-results {
  sql: select * from datasource where url is null or name is null;
  note: url and name of data source should be filled in
}
some-results {
  sql: select * from sequencevariant where id in (select genes from genessequencevariant);
  note: at least some SequenceVariant objects should have gene references
}
#some-results {
#  sql: select cds.id, primaryidentifier, length(intermine_sequence.residues), intermine_end - intermine_start + 1 as calc_length from cds, location, intermine_sequence where chromosomelocationid = location.id and length(intermine_sequence.residues) <> intermine_end - intermine_start + 1 limit 10
#  note: make sure that there are at least some CDSs with lengths shorter than the end-start+1, which is evidence that the CDS lengths are the (sum of the exon lengths - UTR length) see #621
#}
no-results {
  sql: select gene.id from gene where length > 1000000
  note: no genes should be too long
}
no-results {
  sql: select l1.id, l1.intermine_start, l2.id, l2.intermine_end from location as l1, location as l2 where l1.subjectid = l2.subjectid and l1.objectid = l2.objectid and l1.intermine_start = l2.intermine_start and l1.intermine_end = l2.intermine_end and l1.id <> l2.id
  note: no two location objects should have the same objectid, subjectid, start and end positions
}
no-results {
  sql: select rr1.primaryidentifier, rr1.id, rr2.primaryidentifier, rr2.id from regulatoryregion as rr1, regulatoryregion as rr2 where rr1.primaryidentifier = rr2.primaryidentifier and rr1.id <> rr2.id
  note: no two regulatoryregions should have the same primaryidentifier (see #564)
}
no-results {
  sql: select gene1.primaryidentifier, gene1.id, gene2.primaryidentifier, gene2.id from gene as gene1, gene as gene2 where gene1.primaryidentifier = gene2.primaryidentifier and gene1.id <> gene2.id
  note: no two genes should have the same primaryidentifier
}
no-results {
  sql: select translation1.primaryidentifier, translation1.id, translation2.primaryidentifier, translation2.id from intermine_translation as translation1, intermine_translation as translation2 where translation1.primaryidentifier = translation2.primaryidentifier and translation1.id <> translation2.id
  note: no two Translation objects should have the same primaryidentifier
}
no-results {
  sql: select transcript1.primaryidentifier, transcript1.id, transcript2.primaryidentifier, transcript2.id from transcript as transcript1, transcript as transcript2 where transcript1.primaryidentifier = transcript2.primaryidentifier and transcript1.id <> transcript2.id
  note: no two Transcript objects should have the same primaryidentifier
}
no-results {
  sql: select loc1.id, loc2.id, sv.id from location as loc1, location as loc2, sequencevariant as sv where loc1.subjectid = loc2.subjectid and loc1.subjectid = sv.id and loc1.id <> loc2.id
  note: no sequencevariants should have more than one location (ticket #540)
}
no-results {
  sql: select * from chromosomeband where primaryidentifier = '-'
  note: see #567
}
no-results {
  sql: select * from regulatoryregion where chromosomelocationid is null
  note: see #569
}
no-results {
  sql: select * from bioentity where primaryidentifier is null
  note: we should not have null primaryidentifier
}
no-results {
  sql: select lsf.id, lsf.primaryidentifier, intermine_sequence.id from locatedsequencefeature as lsf, intermine_sequence where intermine_sequence.id = sequenceid and length(intermine_sequence.residues) <> lsf.length
  note: LocatedSequenceFeature.length should equal the length of the Sequence.residues (see #669)
}
no-results {
  sql: select lsf.id, lsf.primaryidentifier, lsf.length, seq.id, seq.length from locatedsequencefeature as lsf, intermine_sequence as seq where lsf.sequenceid = seq.id and lsf.length != seq.length
  note: LocatedSequenceFeature.length should equal the length of the Sequence.length (see #669)
}
no-results {
  sql: select id, length from intermine_sequence where length <= 0;
  note: Sequence.length should be greater than 0
}
no-results {
  sql: select subjectid, sourceid, type, intermine_value, count(*) from synonym group by subjectid, sourceid, type, intermine_value having count(*) > 1
  note: If synonym key used correctly for all sources there should be no duplicate synonyms
}
no-results {
  sql: select primaryidentifier, count(*) from bioentity group by primaryidentifier having count(*) > 1
  note: There should be no duplicate primaryidentifier..
}
no-results {
  sql: select * from intermineobject where id in (select b.id from bioentity b where b.primaryidentifier is not null and not exists (select * from synonym s where s.intermine_value = b.primaryidentifier and s.subjectid = b.id)) limit 100
  note: all BioEntities should have their primaryidentifier as a synonim
}
no-results {
  sql: select * from intermineobject where id in (select g.id from gene g where g.primaryidentifier is not null and not exists (select * from synonym s where s.intermine_value = g.primaryidentifier and s.subjectid = g.id)) limit 100
  note: all Genes should have their primaryidentifier as a synonim
}
no-results {
  sql: select * from intermineobject where id in (select g.id from gene g where g.symbol is not null and not exists (select * from synonym s where s.intermine_value = g.symbol and s.subjectid = g.id)) limit 100
  note: all Genes should have their symbol as a synonim
}
no-results {
  sql: select * from intermineobject where id in (select p.id from protein p where p.primaryAccession is not null and not exists (select * from synonym s where s.intermine_value = p.primaryAccession and s.subjectid = p.id)) limit 100
  note: all Proteins should have their primaryAccession as a synonim
}
no-results {
  sql: select t1.id, t1.primaryidentifier, t2.id, t2.primaryidentifier from intermine_translation as t1, intermine_translation as t2 where t1.id != t2.id and t1.primaryidentifier = t2.primaryidentifier
  note: no two Translations should have the same primaryidentifier
}
no-results {
  sql: select * from intermine_translation where mrnaid is null;
  note: all Translations should have a non-null mrnaid
}
no-results {
  sql: select * from mrna where translationid is null;
  note: all MRNAs should have a non-null translationid
}
no-results {
  sql: select distinct a1_.id, a1_.primaryidentifier, a1_.name, a2_.id, a2_.primaryidentifier from gene as a1_, intergenicregion as a2_, locatedsequencefeatureoverlappingfeatures as indirect0 where a1_.id = indirect0.overlappingfeatures and indirect0.locatedsequencefeature = a2_.id
  note: No genes should overlap IntergenicRegions
}

results-report {
  sql: select * from datasource
  max-results: 1000
}
results-report {
  sql: select * from organism
}

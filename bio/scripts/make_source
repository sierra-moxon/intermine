#!/usr/bin/perl

use strict;
use warnings;
use File::Find;
use File::Path;
use Cwd;

my $BIO_DIR = 'bio';
my $STRUCTURE_DIR = "$BIO_DIR/skeletons/source";

sub usage
{
  my $message = shift;

  die "$0: $message\n";
}

if (@ARGV != 2) {
  usage (<<USAGE);
needs two arguments:
  - the source name (eg. foobase-gene-data)
  - the source type (eg. custom-file)
USAGE
}

my $source_name = shift;
my $source_type = shift;

my %project_properties = (
                          'custom-file' => <<PROPS
have.file.custom.tgt = true
converter.class = org.intermine.bio.dataconversion.WormBaseIdentifiersConverter
PROPS
                          );

(my $camel_case_source_name = $source_name) =~ s/(\w)([^\-_]+)[_\-]?/\U$1\E$2/g;

my %substitutions = (
                     'source-name' => $source_name,
                     'camel-case-source-name' => $camel_case_source_name,
                    );

if (exists $project_properties{$source_type}) {
  $substitutions{'project-properties'} = $project_properties{$source_type}
} else {
  usage ("unknown source type: $source_type");
}

# check that we're in the right part of checkout
if (!-d 'imbuild' || !-d 'intermine') {
  usage (<<MESSAGE);
need to run in the top level of an intermine checkout (containing
"imbuild" and "intermine")
MESSAGE
}

sub substitute
{
  my $text = shift;

  for my $subs_key (keys %substitutions) {
    $text =~ s/\$\{$subs_key\}/$substitutions{$subs_key}/;
  }

  return $text;
}

my $start_dir = getcwd;

# substitute ${foo} sequences in file contents and in file names
sub process
{
  my $orig_path = "$start_dir/$File::Find::name";
  my $dest_path = $File::Find::name;

  $dest_path =~ s:$STRUCTURE_DIR(.*):$start_dir/$BIO_DIR/$source_name$1:;

  $dest_path = substitute($dest_path);

  if (-d $orig_path) {
    mkpath($dest_path);
  } else {
    open my $orig, '<', $orig_path or die "can't open $orig_path: $!\n";
    open my $dest, '>', $dest_path or die "can't open $dest_path: $!\n";

    while (my $line = <$orig>) {
      $line = substitute($line);

      print $dest $line;
    }

    close $orig or die "can't close $orig_path: $!\n";
    close $dest or die "can't close $dest_path: $!\n";
  }
}

sub preprocess
{
  return grep {$_ !~ /^(\.svn|.*~)$/} @_;
}

find({
      wanted => \&process, 
      preprocess => \&preprocess
     },
     $STRUCTURE_DIR);

#!/usr/bin/perl

=head1 SYNOPSIS

    get_biogrid /path/to/data/directory

=head1 SUMMARY

Download files from  http://www.thebiogrid.org/downloads.php:

=over

=item * BIOGRID-ORGANISM-x.x.xx.psi25.zip

=back

Extract the following three files: 

=over

=item * BIOGRID-ORGANISM-Drosophila_melanogaster-x.x.xx.psi25.xml 
=item * BIOGRID-ORGANISM-Caenorhabditis_elegans-x.x.xx.psi25.xml 
=item * BIOGRID-ORGANISM-Saccharomyces_cerevisiae-x.x.xx.psi25.xml

=back

=cut

use strict;
use warnings;

use IO::All;
use Path::Class;
use File::Temp;
use File::Copy;
use URI;
use LWP;
use Web::Scraper;

use constant METADATA_URL => "http://thebiogrid.org/scripts/fetchDirectoryDescription.php";
my $source_name = 'biogrid';

my $scraper = scraper {
    process 'h2', heading => 'TEXT';
};

@ARGV == 1 or die "Expected one argument: data_directory\nusage:\t$0 data_dir\n";

my $ua = LWP::UserAgent->new(agent => 'Mozilla/5.0');
my $response = $ua->post(METADATA_URL, {directory => '/Current Release'});
die $response->status_line unless $response->is_success;
my $scraps = $scraper->scrape($response);

my ($version) = $scraps->{heading} =~ /Release\s+(.*)/g;

die "[ERROR]\tCould not fetch version" unless $version;

my $conf = io($0 . '.config')->chomp;
my @desired_organisms;

while (my $option = $conf->getline) {
    my ($k, $v) = split(/\s*=\s*/, $option);
    @desired_organisms = split(/,\s*/, $v)
        if ($k eq 'organisms');
}

my $file_address = 'http://thebiogrid.org/downloads/archives/Release%20Archive/BIOGRID-'
                    . $version . '/BIOGRID-ORGANISM-' . $version . '.psi25.zip';


my $data_dir = dir($ARGV[0]);

warn "[INFO]\tDownloading $source_name data (version $version) to $data_dir\n";

my $source_dir = $data_dir->subdir($source_name); 

unless (-d "$source_dir") {
    die "[ERROR]\tFile exists at $source_dir - cannot use this as a directory" if -e "$source_dir";
    $source_dir->mkpath() or die "[ERROR] Could not create source directory: $source_dir";
}

my $version_dir = $source_dir->subdir($version);

if (-d "$version_dir") {
    die "[INFO]\t$version_dir exists and is not empty - skipping\n" if ($version_dir->children);
} else {
    $version_dir->mkpath();
}

my $tmp = File::Temp->new(SUFFIX => '.zip', UNLINK => 0);

my $extract_dir = File::Temp->newdir;

io("$tmp") < io->http($file_address);

my @files_to_extract = map {'BIOGRID-ORGANISM-' . $_ . '-' . $version . '.psi25.xml'} 
                        @desired_organisms;
open(my $pipe, '-|', "unzip", "$tmp", @files_to_extract, "-d", "$extract_dir")
    or die "[ERROR]\tcould not open unzip";
while (<$pipe>) {
    print STDERR "[unzip]\t", $_;
}
close $pipe or die "[ERROR]\tProblem closing $pipe, $!";

my @extracted_files = dir("$extract_dir")->children;
copy("$_" => $version_dir->file($_->basename)->stringify) or die "Problem copying $_"
    for @extracted_files;

my $current_dir = $source_dir->subdir("current");

unlink("$current_dir") if (-e "$current_dir");

symlink("$version_dir" => "$current_dir") 
    or die "[ERROR]\tCould not make symlink $version_dir => $current_dir";

warn "[INFO]\tNew $source_name data available in $current_dir for version $version\n";

exit;

#!/usr/bin/perl
# script to download ncbi gene number and pubmed ID files

use strict;

BEGIN {
  # find the lib directory by looking at the path to this script
  push (@INC, ($0 =~ m:(.*)/.*:)[0] . '/../../intermine/perl/lib/');
}
use InterMine::DataDownloader;

#Define ARGVs
my ($logdir,$logname,$home,$config_file);
if(@ARGV!=4){
	die "Wrong number of ARGVs!\nget_all.sh should supply the log directory, temporary log name, /shared/data/ and config file.\n";
}else{
	$logdir = $ARGV[0];
	$logname= $ARGV[1];
	$home = $ARGV[2];
	$config_file = $ARGV[3];
}

print "\nReady to download NCBI gene and pubmed Id...\n";

#for connecting to the ftp server
my $ncbi_server = "ftp.ncbi.nlm.nih.gov";
my $ncbi_dir = "gene/DATA";
my $username = "anonymous";
my $password = "richard\@flymine.org";

#files to download
my $gene_info_file = "gene_info.gz";
my $pubmed_info_file = "gene2pubmed.gz";

#connect to the server and change to source directory
my $connection = &ftp_connect($ncbi_server,$username,$password);
	
$connection->cwd($ncbi_dir)
	or die "Cannot change working directory ", $connection->message;

#use the date stamp to create a version id for the output directory
my $date_string = &date_string_file($connection,$pubmed_info_file);

#destination directories
my $ncbi_main_dir = "$home/pubmed";
my $download_dir = "$ncbi_main_dir/$date_string";
my ($updated,$version_buffer,$log_buffer);

#make sure that the necessary directories exist and download new data if available
my $current_link = "$home/pubmed/current";
&checkdir_exists($ncbi_main_dir);
if(&checkdir_exists($download_dir)==1){
	&ftp_download($connection,$download_dir,$gene_info_file);
	&ftp_download($connection,$download_dir,$pubmed_info_file);
	&unzip_dir($download_dir);
	&make_link($date_string,$current_link);
	my $date = &convert_date();
	$log_buffer = "NCBI_Id_PubmedId\nNew data available in $download_dir containing file ";
	$version_buffer = "Gene versus publications from PubMed\n$date_string\nA mapping between genes and publications which mention them for D. melanogaster, C. elegans and S. cerevisiae  from NCBI\nhttp://www.ncbi.nlm.nih.gov/\n";
	$updated = 1;
}else{
	warn " current version up to date - skipping download\n";
	$log_buffer = "NCBI_Id_PubmedId\nCurrent data ok\n\n";
	$updated = 0;
}

$connection->quit;

#==============================================================================
#this section was once ncbi_pubmed_xml.pl

#usage: takes data from /shared/data/pubmed/gene2pubmed as $ARGV[1] and 
#/shared/data/pubmed/gene_info as $ARGV[0] (the current files were downloaded from
#ftp://ftp.ncbi.nlm.nih.gov/gene/DATA) and then writes the xml file for linking the 
#ncbi gene ID to one or more pubmed IDs. 

use IO::File;
use XML::Writer;
use InterMine::Item;
use InterMine::ItemFactory;
use InterMine::Model;

#Kim's stuff for writing XML
my @items = ();
my $model_file = '../../flymine/dbmodel/build/model/genomic_model.xml';
my $model = new InterMine::Model(file => $model_file);
my $item_factory = new InterMine::ItemFactory(model => $model);
my @items_to_write = ();

my $outfile = "$download_dir/ncbiID_pubmedID.xml";
if(-e $outfile){
	warn "XML already generated\n";
}else{
	#define organism ids to include
	my %ids=&config_species($config_file,"pubmed");


	##create gene/pubmed objects and associate pubmed objects to correct gene object 
	my (%organism, %genes, %pubID, %pubgene);
	my $gene2pubmed = "$current_link/gene2pubmed";
	my $gene_info = "$current_link/gene_info";
	
	print "Creating objects\n";
	#open gene2pubmed and get data
	open(F,"<$gene2pubmed") or die "$!";
	while(<F>){
		my @f = split/\t/;
		my $current_ID=$f[0];
		#only use the organisms in %ids
		if(exists $ids{$current_ID}){
			chomp $f[2];
			my ($geneID, $pubID) = ($f[1], $f[2]);
			my ($org_item, $gene_item, $pub_item);
			#print "Gene $geneID pub# $pubID\n";
		
			#check to see if the organism object has already been stored, if not create it
			if(!exists $organism{$current_ID}){
				$org_item = make_item('Organism');
				$org_item->set('taxonId', $current_ID);
				$organism{$current_ID}={'object' => $org_item};
			}
			#check to see if the gene object has already been stored, if not create it
			if(!exists $genes{$geneID}){
				$gene_item = make_item('Gene');
				$gene_item->set('ncbiGeneNumber', $geneID);
				$genes{$geneID}={'object' => $gene_item};
			}
			#check to see if the publication object has already been stored, if not create it
			if(!exists $pubID{$pubID}){
				$pub_item = make_item('Publication');
				$pub_item->set('pubMedId', $pubID);	
				$pubID{$pubID}={'object' => $pub_item};
			}
			#associate the publication with the gene in the hash 
			$genes{$geneID}{'publications'}{$pubID} = $pubID;
		}
	}
	close(F) or die "$!";

	##add the gene identifier or primaryIdentifier used by flymine to the ncbi number gene object
	my (%IDdata,%DBdata);

	print "Creating references between objects\n";
	#open gene_info
	open(F,"<$gene_info") or die "$!";
	while(<F>){
		my @f = split/\t/;
		my $current_ID=$f[0];
		#only use the organisms in %ids
		if(exists $ids{$current_ID}){
	  	  	my ($identifier,$dbID);
			my $ncbigeneID = $f[1];
		
			#use taxonID to get correct type of data where available
			#id 180454 uses the gene identifier, some are missing and are a "-" and should be ignored
			if($current_ID==180454 && $f[3] ne "-"){
				chomp $f[3];
		  		$identifier = $f[3];
				#remove excess characters from the identifier
				if($identifier=~ /^AgaP_/){
					$identifier=substr $identifier,5;
				}
				#check for duplicates - have we already processed this gene from this file?
				if(exists $genes{$ncbigeneID}{$identifier}){
					#print "$identifier already found\n"
				#was it in gene2pubmed?	If so set the references in the gene object
				}elsif(exists $genes{$ncbigeneID}->{'object'}){
					#print "$identifier\t$ncbigeneID\tValid id\n";
					$genes{$ncbigeneID}{$identifier}=$identifier;
					my $gene_item = $genes{$ncbigeneID}->{'object'};
					my $org_item = $organism{$current_ID}->{'object'};
					$gene_item->set('primaryIdentifier', $identifier);
					$gene_item->set('organism', $org_item);
				#some identifiers in gene_info are not in gene2pubmed and shouldn't be
				#processed if found again
				}else{
					#print"$identifier\t$ncbigeneID\tInvalid ID\n";
					delete $genes{$ncbigeneID};	
				}
			#use primaryIdentifier where available, but ignore missing data	
			}elsif($f[5] ne "-"){
				chomp $f[5];
				$dbID = $f[5];
		    	#remove excess characters from the primaryIdentifier
				if($dbID=~ /^SGD:/){
					$dbID=substr $dbID,4;
	      		}elsif($dbID=~/^WormBase:/){
					$dbID=substr $dbID,9;
	      		}elsif($dbID=~/^[Ff][Ll][Yy][Bb][Aa][Ss][Ee]:/){
					$dbID=substr $dbID,8;
	      		}
			
				#check for duplicates - have we already processed this gene from this file?
				if(exists $genes{$ncbigeneID}{$dbID}){
					#print "$dbID already found\n"
				#was it in gene2pubmed?	If so set the references in the gene object
				}elsif(exists $genes{$ncbigeneID}->{'object'}){
					#print "$dbID\t$ncbigeneID\tValid id\n";
					$genes{$ncbigeneID}{$dbID}=$dbID;
					my $gene_item = $genes{$ncbigeneID}->{'object'};
					my $org_item = $organism{$current_ID}->{'object'};
					$gene_item->set('primaryIdentifier', $dbID);
					$gene_item->set('organism', $org_item);
				#some identifiers in gene_info are not in gene2pubmed and shouldn't be
				#processed if found again
				}else{
					#print"$dbID\t$ncbigeneID\tInvalid ID\n";
					delete $genes{$ncbigeneID};
				}	
	    	}	
		}
	}
	close(F) or die "$!";
	
	print "Creating publication collections\n";
	#for each gene, find which pubmedIds reference it, retrieve objects from the hash
	foreach my $gene (sort keys %genes){
		my @pub_items;
		#print "Gene $gene has publications\n";
		my $gene_item = $genes{$gene}->{'object'};
		foreach my $pubID (sort keys %{$genes{$gene}->{publications}} ) {
			#print "$pubID\n";
			my $pub_item = $pubID{$pubID}->{'object'};
			push @pub_items,$pub_item;
		}
		$gene_item->set('publications', [@pub_items]);
	}	

	#write xml file
	print "Writing xml\n";
	my $output = new IO::File(">$outfile");
	my $writer = new XML::Writer(OUTPUT => $output, DATA_MODE => 1, DATA_INDENT => 3);
	$writer->startTag('items');
	for my $item (@items_to_write) {
	  $item->as_xml($writer);
	}
	$writer->endTag('items');
	$writer->end();
	$output->close();
}
# write log and version files
if($updated == 1){
	$log_buffer .= "ncbiID_pubmedID.xml\n\n";
	&write_version($ncbi_main_dir,$version_buffer);
	system "chmod -R a+r,g+w $download_dir";
}
&write_log($log_buffer,$logdir,$logname);

sub make_item
{
  my $implements = shift;
  my $item = $item_factory->make_item(implements => $implements);
  push @items_to_write, $item;
  return $item;
}

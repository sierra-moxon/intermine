#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Std;

sub usage
{
  die <<'EOF'
usage:
  $0 [-p postgres_port_on_mirror] dump_file mirror_server

The path to dump_file must be visible on mirror_server
EOF
}

my $mirror_port;

if (@ARGV >= 2 && $ARGV[0] eq '-p') {
  shift;
  $mirror_port = shift;
}

if (@ARGV != 1 && @ARGV != 2) {
  usage;
}

my $dump_file = shift;
my $mirror_server = shift;

my @dump_command = qw[pg_dump -c -U userprofile];
my @psql_command = qw[psql -q -U userprofile];
my @createdb_command = qw[createdb -U userprofile];
my $db_prefix = "userprofile-release-";

my $max_version = -1;

open REMOTE, qq{psql -l|}
  or die "can't open pipe to read list of databases";

while (my $line = <REMOTE>) {
  if ($line =~ /$db_prefix([\d\.]+)/) {
    my $this_version = $1;
    if ($this_version > $max_version) {
      $max_version = $this_version;
    }
  }
}

close REMOTE;

if ($max_version == -1) {
  die "can't find latest version of userprofile database\n";
}

my $latest_db = $db_prefix . $max_version;
$dump_file .= ".$max_version";

my @params = ("-f", $dump_file, $latest_db);

my $version_file = "$ENV{HOME}/.userprofile_latest_version";
my $db_ver_handle;
open $db_ver_handle, '>', $version_file or die "can't open $version_file for writing\n";
print $db_ver_handle "$max_version";
close $db_ver_handle;

print "dumping with: @dump_command @params\n";

system qw[pg_dump --version];
system @dump_command, @params;

my @createdb_params = ($latest_db);

if (defined $mirror_port) {
  unshift @createdb_params, '-p', $mirror_port;
}

print <<EOF;
attempting to create $latest_db on $mirror_server with command:
ssh $mirror_server "@createdb_command @createdb_params"
  - expect a failure if the database already exists
EOF

system ("ssh", $mirror_server, "@createdb_command @createdb_params");

my @psql_params = @params;

if (defined $mirror_port) {
  unshift @psql_params, "-p", $mirror_port;
}

print qq[loading with: ssh $mirror_server "@psql_command @psql_params"\n];

system ("ssh", $mirror_server, "psql --version");
system ("ssh", $mirror_server, "@psql_command @psql_params");



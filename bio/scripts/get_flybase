#!/usr/bin/perl

# script to download FlyBase fasta files

# This script takes and species abbreviation as a argument (e.g. dmel, dpse)
# and works out the current release version at ftp.flybase.net.
# If the version  found does not exist in ./flybase/$org_abbrev/$version
# new files will be downloaded.  The script should be run in /shared/data

use strict;
use warnings;

use Net::FTP;

#Define ARGVs
my ($logdir,$logname,$home,$file);
if(@ARGV!=4){
	die "Wrong number of ARGVs!\nget_all.sh should supply the log directory, temporary log name, /shared/data/ and config file.\n";
}else{
	$logdir = $ARGV[0];
	$logname= $ARGV[1];
	$home = $ARGV[2];
	$file = $ARGV[3];
}


my $flybase_server = "ftp.flybase.net";
my $flybase_releases_dir = "releases";
my $flybase_current_dir = "current";
my $flybase_dir = "flybase";
my $genomes_dir = "genomes";
my $fasta_dir = "fasta";


#### Access FlyBase ftp server
my $flybase_ftp = Net::FTP->new($flybase_server, Passive => 1)
  or die "Cannot connect to $flybase_server: $@";

$flybase_ftp->login("anonymous",'-anonymous@')
  or die "Cannot login ", $flybase_ftp->message;

$flybase_ftp->cwd($flybase_releases_dir)
  or die "Cannot change working directory ", $flybase_ftp->message;

$flybase_ftp->cwd($flybase_current_dir)
  or die "Cannot change working directory ", $flybase_ftp->message;

# find out the version 
my @file_list = $flybase_ftp->ls();
my $version;

my @species_list = undef;

my $i = 0;
for my $file (@file_list) {
    my $start = substr($file, 0, 2);
    if ($start eq "FB") {
        $version = $file;
    }
    if ($file =~ /^[a-z]{4}_/) {
        my $species = substr($file, 0, 4);
        $species_list[$i] = $species;
        $i++;
    }
}

print "species: @species_list\n";

if (!defined $version) {
    die "can't find file with version number\n";
}

my $download_dir = "$home/$flybase_dir/$version";

if (-d "$download_dir/$fasta_dir") {
  die "$download_dir/$fasta_dir directory already exists - not updating\n";
}

if (!(-d "$home/$flybase_dir")) {
print "creating $home/$flybase_dir\n";
    mkdir "$home/$flybase_dir";
}

if (!(-d $download_dir)) {
print "creating $download_dir\n";
    mkdir "$download_dir" or die "failed to create $download_dir";
}

if (!(-d "$download_dir/$fasta_dir")) {
print "creating $download_dir/$fasta_dir\n";
    mkdir "$download_dir/$fasta_dir"
        or die "failed to create $download_dir/$fasta_dir";
}

# now find fasta from genomes/xxxx/current/fasta

$flybase_ftp->cwd()
    or die "failed to change to root directory\n";

$flybase_ftp->cwd($genomes_dir)
    or die "failed to change directory to $genomes_dir";

my($filetype) = "binary"; 
$flybase_ftp->$filetype;

my $species_dir = undef;

my $file_types = "all-CDS|all-gene-|all-five_prime_UTR|all-three_prime_UTR";



for my $species (@species_list) {
    $flybase_ftp->cwd("$species/current/fasta")
        or die "Could not change to directory: $species/current/fasta";
    my @files = $flybase_ftp->ls();
    for my$file (@files) {
        if ($file =~ $file_types) {
            print "getting: $file to $download_dir/$fasta_dir/\n";
            $flybase_ftp->get($file, "$download_dir/$fasta_dir/$file")
                or die "failed to get file: $file";
        }
    }
    $flybase_ftp->cwd("../../../");
}

# unzip fasta files
print"gzip -dr $download_dir/$fasta_dir\n";

if ((system "gzip -dr $download_dir/$fasta_dir") != 0) {
  die qq|system "gzip -dr $download_dir/$fasta_dir" failed: $?\n|;
}


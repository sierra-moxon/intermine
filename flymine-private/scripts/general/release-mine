#!/usr/bin/perl -w

# release a new mine
#
# steps:
#  - update from subversion
#  - find current version from properties file
#  - create new properties file
#   * update version
#   * update deploy location
#  - createdb new databases <minename>-r<version> and <minename>-r<version>-userprofile
#  - load dump file of production database (if needed)
#  - precompute queries and templates
#  - create-db-userprofile with new properties file
#  - webapp clean-all
#  - update gbrowse properties
#  - stop old webapp
#  - write-userprofile-xml for current version
#  - read-userprofile-xml with new properties
#  - release webapp
#  - start new webapp
#  - start old webapp
#  - update apache rewrite/redirect configuration
#  - restart apache


use strict;
use warnings;

use File::Copy;
use Date::Manip;


# use Expect;
# use Getopt::Std;
# use Cwd;

if (@ARGV != 1) {
  die "$0: error, this script needs one argument - the mine name\n";
}

my $project_name = shift;

my $PROP_FILE_PREFIX = "$project_name.properties";
my $BUILD_PROP_FILE_PREFIX = "build.properties.$project_name";
my $WEBAPP_DIR = "$ENV{HOME}/svn/trunk/$project_name/webapp";
my $APACHE_CONF_FILENAME = '/etc/httpd/conf.d/proxy_ajp.conf';
my $OLDEST_VERSION = 1;
my $USERPROFILE_XML_FILENAME = "build/userprofile.xml";
my $USERPROFILE_XML_BACKUP_FILENAME = "$ENV{HOME}/backups/userprofile.xml";
my $START_DATE = UnixDate("now", "%O");
my $LOG_FILENAME = "$ENV{HOME}/logs/$START_DATE.log";
my $GBROWSE_CONF_DIR = '/gbrowse/etc/gbrowse.conf/';

my $rel_date = `date +"(%d%b%Y)"`; #it appears with the release version

sub die_with_log
{
  my $message = shift;
  die "$message\n\nLog messages in: $LOG_FILENAME\n";
}


# start processing

if (!-d "intermine") {
  die "$0: no intermine directory - this script must be run in a checkout\n";
}


#################

warn "subversion update\n";

system ("svn update >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "subversion update failed: $?";

#################
warn "reading current properties file\n";

my $current_version = -1;

chdir $ENV{HOME} or die "can't change directory to $ENV{HOME}\n";

opendir DIR, "." or die "can't open directory $ENV{HOME} for reading\n";

while (defined(my $filename = readdir(DIR))) {
  if ($filename =~ /^$PROP_FILE_PREFIX.r(\d+)$/) {
    if ($1 > $current_version) {
      $current_version = $1;
    }
  }
}

if ($current_version == -1) {
  die "can't find a properties file for $project_name with prefix $PROP_FILE_PREFIX\n";
}

warn "most recent version of $project_name: $current_version\n";

my $current_prop_filename = "$PROP_FILE_PREFIX.r$current_version";

warn "current properties file: $current_prop_filename\n";

my $current_build_prop_filename = "$BUILD_PROP_FILE_PREFIX.r$current_version";

warn "current build properties file: $current_build_prop_filename\n";

my $new_version = $current_version + 1;



#################
warn "creating new properties files\n";

sub create_properties_file
{
  my $current_prop_filename = shift;
  my $new_prop_filename = shift;
  my @prop_names = @_;

  warn "  creating new properties file: $new_prop_filename\n";

  if (-e $new_prop_filename) {
    die "trying to overwrite: $new_prop_filename\n";
  }

  open my $new_prop_file, '>', $new_prop_filename or die "can't open $new_prop_filename: $!\n";

  open my $current_file, '<', $current_prop_filename
    or die "can't open $current_prop_filename: $!\n";

  my %fixed = ();

  while (defined (my $line = <$current_file>)) {
    for my $prop_name (@prop_names) {
      if ($line =~ /$prop_name=(.*)(\d+)(.*)/) {
        if ($2 == $current_version) {
          $fixed{$prop_name} = 1;
	  
	  #$line = "$prop_name=$1$new_version$3\n";
	  # changed to accomodate date..
          if ($prop_name eq "project.releaseVersion")  {	  
	      $line = "$prop_name=$1$new_version $rel_date $3\n"
	  } else {
	      $line = "$prop_name=$1$new_version$3\n";
      }

          last;
        } else {
          die "line has wrong version ($1): $line\n";
        }
      }
    }
    print $new_prop_file $line;

  }

  close $new_prop_file or die "can't close $new_prop_filename: $!\n";
  close $current_file or die "can't close $current_file: $!\n";

  for my $prop_name (@prop_names) {
    if (!exists $fixed{$prop_name}) {
      unlink $new_prop_file;
      die "can't find property $prop_name in $current_prop_filename\n";
    }
  }
}

my $new_prop_filename = "$PROP_FILE_PREFIX.r$new_version";
my $new_build_prop_filename = "$BUILD_PROP_FILE_PREFIX.r$new_version";

create_properties_file($current_prop_filename, $new_prop_filename,
                       'db.production.datasource.databaseName',
                       'db.userprofile-production.datasource.databaseName');
create_properties_file($current_build_prop_filename, $new_build_prop_filename,
                       'webapp.path', 'project.releaseVersion',
                       'gbrowse.database.source');

my $new_prop_symlink = "$project_name-webapp.properties.r$new_version";
symlink $new_prop_filename, $new_prop_symlink
  or die "can't create symlink to $new_prop_symlink: $!\n";
my $new_build_prop_symlink = "build.properties.$project_name-webapp.r$new_version";
symlink $new_build_prop_filename, $new_build_prop_symlink
  or die "can't create symlink to $new_build_prop_symlink: $!\n";

sub create_gbrowse_conf
{
  my $gbrowse_dir = shift;
  my $old_version = shift;
  my $new_version = shift;

  my $old_file_name = "$GBROWSE_CONF_DIR/modmine-r$old_version.conf";
  my $new_file_name = "$GBROWSE_CONF_DIR/modmine-r$new_version.conf";

  warn "  creating new gbrowse conf: $new_file_name\n";

  if (-e $new_file_name) {
    die "trying to overwrite: $new_file_name - exiting\n";
  }

  open my $new_file, '>', $new_file_name or die "can't open $new_file_name: $!\n";

  open my $old_file, '<', $old_file_name
    or die "can't open $old_file_name: $!\n";

  while (<$old_file>) {
    s/(description\s*=.*release) $old_version/$1 $new_version/;
    s|/release-$old_version|/release-$new_version|;
    print $new_file $_;
  }

  close $new_file or die "can't close $new_file_name: $!\n";
  close $old_file or die "can't close $old_file_name: $!\n";
}

# create new databases

# system ("createdb modmine-r$new_version >> $LOG_FILE 2>&1") == 0
#   or die_with_log "createdb failed: $?\n";
system ("createdb modmine-r$new_version-userprofile >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "createdb failed: $?";


# load dump file of production database (if needed)

my $dump_file_name = undef;

if (@ARGV == 1) {
  die "unimplemented";
}


#################
# precompute queries and templates

# XXX TODO


#################
warn "webapp clean-all\n";

chdir $WEBAPP_DIR or die "can't directory change to $WEBAPP_DIR\n";

system ("ant -Drelease=r$new_version clean-all >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "create-db-userprofile failed: $?";


#################
warn "building new webapp\n";

chdir $WEBAPP_DIR or die "can't directory change to $WEBAPP_DIR\n";

system ("ant -Drelease=r$new_version default >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "create-db-userprofile failed: $?";

#################

warn "create-db-userprofile with new properties file\n";

system ("ant -Drelease=r$new_version create-db-userprofile >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "create-db-userprofile failed: $?";

#################

warn "copying gbrowse properties\n";

create_gbrowse_conf($GBROWSE_CONF_DIR, $current_version, $new_version);

#################
warn "stopping old webapp (r$current_version)\n";

#system ("ant -Drelease=r$current_version stop-webapp >> $LOG_FILENAME 2>&1") == 0
#  or die_with_log "can't stop webapp r$current_version: $!";


#################
warn "write-userprofile-xml for current version\n";

system ("ant -Drelease=r$current_version write-userprofile-xml >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't write userprofile XML: $?";

copy($USERPROFILE_XML_FILENAME, "$USERPROFILE_XML_BACKUP_FILENAME.r$current_version")
  or die_with_log "copy failed: $!";


#################
warn "read-userprofile-xml with new properties\n";

system ("ant -Drelease=r$new_version read-userprofile-xml >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't read userprofile XML into r$new_version: $?";


#################
warn "release new webapp r$new_version\n";

my @TARGETS = qw(remove-webapp release-webapp);
system ("ant -Drelease=r$new_version @TARGETS >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't write userprofile XML: $?";

#################
exit 0;
warn "update apache rewrite/redirect configuration\n";

{
  open my $apache_conf_file, '>', $APACHE_CONF_FILENAME
  or die "can't open $APACHE_CONF_FILENAME for writing: $!\n";

  print $apache_conf_file <<"APACHE_CONF";
# WARNING: GENERATED BY $0 - DO NOT EDIT
<VirtualHost *:80>
    ServerAdmin webmaster\@flymine.org
    ServerName intermine.modencode.org
    DocumentRoot /var/www/html/

    LoadModule proxy_ajp_module modules/mod_proxy_ajp.so

    RewriteEngine On
    RewriteRule ^/query(.*)\$ http://intermine.modencode.org/release-$new_version\$1 [P,QSA]
    RewriteRule ^/\$ http://intermine.modencode.org/release-$new_version/begin.do [P]
APACHE_CONF

  for (my $i = $OLDEST_VERSION; $i <= $new_version; $i++) {
    print $apache_conf_file <<"APACHE_CONF";
    ProxyPass /release-$i ajp://mod2:8009/release-$i
    ProxyPassReverse /release-$i http://mod2/release-$i
APACHE_CONF
  }

  print $apache_conf_file <<"APACHE_CONF";
</VirtualHost>
APACHE_CONF
}


#################
warn "restarting apache\n";

system ("sudo /etc/init.d/httpd restart >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't restart httpd: $?";


#################
warn "re-starting old webapp (r$current_version)\n";
system ("ant -Drelease=r$current_version start-webapp >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't start webapp r$current_version: $!";


#################
warn "re-deploy web site\n";

chdir "../../www/$project_name" or die "can't directory change to www/$project_name\n";

system ("ant -Drelease=r$new_version clean release-www >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't re-release web site with new version (r$current_version): $!";


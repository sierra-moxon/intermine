<project name="flymine" default="help" basedir=".">
  <description>FlyMine build file</description>

  <property name="build.properties.local.base"
            value="${user.home}/build.properties.${ant.project.name}"/>
  <condition property="build.properties.local" value="${build.properties.local.base}.${release}"
             else="${build.properties.local.base}">
    <available file="${build.properties.local.base}.${release}"/>
  </condition>
  <available file="${build.properties.local}" property="build.properties.local.present"/>
  <fail message="${build.properties.local} not found" unless="build.properties.local.present"/>

  <property name="runtime.properties.local.base" value="${user.home}/${ant.project.name}.properties" />
  <condition property="runtime.properties.local" value="${runtime.properties.local.base}.${release}"
             else="${runtime.properties.local.base}">
    <available file="${runtime.properties.local.base}.${release}"/>
  </condition>
  <available file="${runtime.properties.local}" property="runtime.properties.local.present"/>
  <fail message="${runtime.properties.local} not found" unless="runtime.properties.local.present"/>

  <!-- Import intermine build tasks -->
  <taskdef resource="org/intermine/task/antlib.xml" classpath="../imbuild/lib/ant-tasks.jar"/>
  <taskdef resource="checkstyletask.properties" classpath="../imbuild/lib/checkstyle-all-3.0b1.jar"/>

  <!-- import common build library -->
  <import file="../imbuild/library.xml"/>

  <!-- SETUP TARGETS -->

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->

  <!-- set ${release} with -Drelease=something on the command line to choose a
       different set of properties files -->

  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <!-- used by build-model.xml -->
  <property name="namespace" value="http://www.flymine.org/model"/>

  <!-- used by build-model.xml -->
  <property name="packagename" value="org.flymine.model"/>

  <property name="intermine.path" location="${basedir}/../intermine"/>
  <property name="old-intermine.path" location="${basedir}/../old-intermine"/>
  <property name="intermine.dist.path" location="${intermine.path}/dist"/>
  <!--property name="intermine.jar.path" location="${intermine.dist.path}/intermine-all.jar"/-->
  <property name="intermine.war.path" location="${basedir}/../intermine/webapp/main/dist/intermine-webapp.war"/>
  <property name="webservice.war.path" location="${basedir}/../intermine/webservice/dist/intermine-webservice.war"/>
  <property name="webservice-client.jar.path" location="${intermine.dist.path}/webservice-client.jar"/>

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- model directory -->
  <property name="model" location="model"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.test" location="${build.resources}/test"/>
  <property name="build.test" location="${build}/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.src.test" location="${build}/testsrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.webapp" location="${build}/webapp"/>
  <property name="build.webapp.model" location="${build.webapp}/model"/>
  <property name="build.tmp" location="${build}/tmp"/>
  <property name="build.gbrowse" location="${build}/gbrowse"/>
  <property name="build.gbrowse.images" location="${build.gbrowse}/images"/>
  <property name="build.gbrowse.data" location="${build.gbrowse}/data"/>
  <property name="build.webapp.intermine.lib" location="${build.webapp}/intermine/WEB-INF/lib"/>
  <property name="build.webservice.lib" location="${build.webapp}/webservice/WEB-INF/lib"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist.www}/api"/>

  <!-- deafult setting for create-indexes in build-model.xml -->
  <property name="create.attribute.indexes" value="false"/>

  <!-- file data sources -->
  <property name="shared.data" location="/shared/data"/>
  <property name="flybase.chado.melanogaster" location="${shared.data}/flybase/dmel/release_4_2_1"/>
  <property name="flybase.chado.pseudoobscura"
            location="${shared.data}/flybase/Drosophila_pseudoobscura/dpse_r20_20051018"/>
  <property name="flybase.uniprot.link.file" location="${flybase.chado.melanogaster}/cg2uniprot.txt"/>

  <!-- set up library filesets -->

  <!-- Ant tasks and unit testing stuff -->
  <patternset id="lib.build">
    <include name="AntDoc*.jar"/>
    <include name="junit*.jar"/>
    <include name="catalina-ant.jar"/>
    <include name="biojava*.jar"/>
    <include name="xmlunit*.jar"/>
  </patternset>

  <!-- Checkstyle library -->
  <patternset id="lib.checkstyle">
    <include name="checkstyle*.jar"/>
  </patternset>

  <!-- Webapp libraries -->
  <patternset id="lib.webapp">
    <include name="biojava*.jar"/>
    <include name="jcommon*.jar"/>
    <include name="jfreechart*.jar"/>
  </patternset>

  <!-- The FlyMine jar file -->
  <patternset id="lib.flymine">
    <include name="flymine.jar"/>
  </patternset>

  <patternset id="lib.models">
    <include name="**/lib/*.jar"/>
  </patternset>


  <target name="init-paths">

    <!-- build dependencies -->
    <dependencies basedir="${basedir}/.."/>

    <!-- set the classpath for the build - basically everything in lib -->
    <path id="base.class.path">
      <pathelement path="${build.resources}"/>
      <path refid="project.execute.path"/>
      <pathelement path="${build.java}"/>
      <fileset dir="${lib}">
        <patternset refid="lib.build"/>
      </fileset>
      <!--<fileset dir="${intermine.dist.path}">
        <include name="intermine-all.jar" />
      </fileset>-->
    </path>

    <path id="genomic.class.path">
      <path refid="base.class.path"/>
      <pathelement location="${build.model}/genomic"/>
      <pathelement location="${build.model}/genomic/flymine"/>
      <pathelement location="${build.model}/genomic/stemcell"/>
    </path>

    <mkdir dir="${build.webapp.intermine.lib}"/>

    <path id="webapp.class.path">
      <pathelement path="${resources}/webapp"/>
      <path refid="base.class.path"/>
      <path refid="genomic.class.path"/>
      <fileset dir="${build.webapp.intermine.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <path id="webservice.class.path">
      <path refid="base.class.path"/>
      <fileset dir="${build.webservice.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <path id="checkstyle.class.path">
      <fileset dir="${lib}">
        <patternset refid="lib.checkstyle"/>
      </fileset>
    </path>

    <path id="models.class.path">
      <path refid="base.class.path"/>
      <path refid="genomic.class.path"/>
      <pathelement location="${build.model}/userprofile"/>
      <pathelement location="${build.model}/acedb"/>
      <pathelement location="${build.model}/mage"/>
      <pathelement location="${build.model}/chado"/>
      <pathelement location="${build.model}/so"/>
      <pathelement location="${build.model}/ensembl"/>
      <pathelement location="${build.model}/rnai"/>
      <pathelement location="${build.model}/long_oligo"/>
      <pathelement location="${build.model}/tiling_path"/>
      <pathelement location="${build.model}/flyreg"/>
      <pathelement location="${build.model}/drosdel"/>
      <pathelement location="${build.model}/orthologue"/>
      <pathelement location="${build.model}/phenotype"/>
      <pathelement location="${build.model}/fulldata"/>
      <pathelement location="${build.model}/psi"/>
      <pathelement location="${build.model}/go"/>
      <pathelement location="${build.model}/taxonomy"/>
      <pathelement location="${build.model}/uniprot"/>
      <pathelement location="${build.model}/protein_structure"/>
      <pathelement location="${build.model}/homophila"/>
      <pathelement location="${build.model}/interpro"/>
      <pathelement location="${build.model}/cdnaclone"/>

      <!--t1dmine/stemcell specific model-->
      <pathelement location="${build.model}/ensembl-human"/>
      <pathelement location="${build.model}/firstef"/>
      <pathelement location="${build.model}/tfbs"/>
      <pathelement location="${build.model}/tfbscluster"/>
      <pathelement location="${build.model}/region"/>
      <pathelement location="${build.model}/diseaseregion"/>
      <pathelement location="${build.model}/ensembl-variation"/>
      <pathelement location="${build.model}/ensembl-disease"/>
      <pathelement location="${build.model}/opposumchain"/>


      <fileset dir="${model}">
        <patternset refid="lib.models"/>
      </fileset>

    </path>

    <path id="project.class.path">
      <path refid="base.class.path"/>
      <fileset dir="${dist}">
        <include name="intermine*.jar" />
      </fileset>
    </path>

    <path id="test.class.path">
      <pathelement path="${build.resources.test}"/>
      <pathelement location="${build.test}"/>
      <path refid="models.class.path"/>
    </path>


  </target>

  <!-- ============================== GLOBAL TASKDEFS ============================= -->

<!--
  <taskdef name="merge-additions" classname="org.intermine.task.ModelMergerTask">
    <classpath refid="models.class.path"/>
  </taskdef>


  <presetdef name="merge-genomic-additions">
    <merge-additions inputModelFile="${build.model}/genomic/genomic_model.xml"
                     additionsFile="${additionsFile}"
                     outputFile="${build.model}/genomic/genomic_model.xml"/>
  </presetdef>
-->

  <!-- ========================= INITIALISATION TARGETS =========================== -->

  <target name="no-dep">
    <property name="no.dep" value="true"/>
  </target>

  <target name="prepare" depends="init-paths">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>

    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>

    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.resources.test}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.model}/fulldata" />
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.src.test}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.tmp}"/>
    <mkdir dir="${build.tmp}/dmel"/>
    <mkdir dir="${build.tmp}/dpse"/>
    <mkdir dir="${build.gbrowse}"/>
    <mkdir dir="${build.gbrowse.images}"/>
    <mkdir dir="${build.gbrowse.data}"/>
    <mkdir dir="${build.webapp}"/>
    <mkdir dir="${build.webapp.model}"/>
    <mkdir dir="${build.webapp}/intermine"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <!-- overwrite default.intermine.properties -->
    <copy todir="${build.resources}" file="${resources}/runtime/default.intermine.properties" overwrite="true"/>
    <copy file="${runtime.properties.local}" tofile="${build.resources}/intermine.properties" overwrite="true"/>
    <copy todir="${build.resources}">
      <fileset dir="${resources}/runtime" />
    </copy>

    <!-- taskdefs -->
    <taskdef name="merge-additions" classname="org.intermine.task.ModelMergerTask">
      <classpath refid="models.class.path"/>
    </taskdef>


    <!-- presetdefs -->

    <presetdef name="merge-genomic-additions">
      <merge-additions inputModelFile="${build.model}/genomic/genomic_model.xml"
                       additionsFile="${additionsFile}"
                       outputFile="${build.model}/genomic/genomic_model.xml"/>
    </presetdef>
  </target>

  <target name="prepare-test" depends="prepare">
    <copy todir="${build.resources.test}" flatten="true" includeEmptyDirs="false" overwrite="true">
      <fileset dir="${resources}/test/"/>
    </copy>

    <copy todir="${build.src.test}">
      <fileset dir="${src.test}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <depend srcdir="${build.src.test}" destdir="${build.test}" closure="yes" dump="yes">
      <classpath>
        <pathelement path="${build.java}"/>
      </classpath>
    </depend>
  </target>

  <target name="compile-test" depends="prepare-test, compile-flymine-java"
          description="compile the java test source" >
    <javac destdir="${build.test}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="test.class.path"/>
      <src path="${build.src.test}" />
    </javac>
  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>

  <!-- Help -->
  <target name="help" description="Displays user targets">
    <echo message=""/>
    <echo message="FlyMine build file - available targets are:"/>
    <echo message=""/>
    <echo message="clean                  --> cleans up the directory"/>
    <echo message=""/>
    <echo message="See 'ant -projecthelp' for full target list"/>
  </target>

  <target name="prepare-build-model" depends="prepare">
    <copy file="${old-intermine.path}/build-model.xml" todir="${build}"/>
    <copy file="${old-intermine.path}/build-webapp.xml" todir="${build}"/>
    <copy file="${model}/drosdel/drosdel_model.xml" todir="${build.model}/drosdel"/>
  </target>


  <!-- ========== MODEL GENERATION/MERGING TARGETS - ORGANISED BY SOURCE ========== -->


  <!-- INTERPRO MODEL GENERATION -->

  <!-- convert interpro zargo to InterMine model -->
  <target name="convert-interpro" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="interpro"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the interpro model additions with the current genomic model -->
  <target name="merge-interpro-model" depends="convert-interpro, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/interpro/interpro_additions.xml"/>
  </target>

  <!-- ENSEMBL MODEL GENERATION -->

  <!-- convert ensembl zargo to InterMine model -->
  <target name="convert-ensembl" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the ensembl model additions with the current genomic model -->
  <target name="merge-ensembl-model" depends="convert-ensembl, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/ensembl/ensembl_additions.xml"/>
  </target>



  <!-- CHADO MODEL GENERATION -->

  <!-- convert chado zargo to InterMine model -->
  <target name="convert-chado" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the chado model additions model with the current genomic model -->
  <target name="merge-chado-model" depends="convert-chado, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/chado/chado_additions.xml"/>
  </target>


  <!-- MAGE MODEL GENERATION -->

  <!-- convert MAGE-OM xmi to InterMine model -->
  <target name="convert-mage" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmi" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <property name="namespace" value="http://www.flymine.org/model/mage#"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the mage model additions with the current genomic model -->
  <target name="merge-mage-model" depends="convert-mage, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/mage/mage_additions.xml"/>
  </target>


  <!-- RNAi MODEL GENERATION -->

  <!-- merge rnai model additions with current genomic model -->
  <target name="merge-rnai-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/rnai/rnai_additions.xml"/>
  </target>

  <!-- HOMOPHILA MODEL GENERATION -->

  <!-- merge homophila model additions with current genomic model -->
  <target name="merge-homophila-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/homophila/homophila_additions.xml"/>
  </target>

  <!-- CDNACLONE MDEL GENERATION -->

  <!-- merge cdna clone model additions with current genomic model -->
  <target name="merge-cdnaclone-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/cdnaclone/cdnaclone_additions.xml"/>
  </target>



  <!-- SEQUENCE ONTOLOGY MODEL GENERATION -->

  <!-- merge so model additions with current genomic model -->
  <target name="merge-so-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/so/so_additions.xml"/>
  </target>


  <!-- GENE ONTOLOGY MODEL GENERATION -->

  <!-- merge go model additions with current genomic model -->
  <target name="merge-go-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/go/go_additions.xml"/>
  </target>


  <!-- ORTHOLOGUE MODEL GENERATION -->

  <!-- merge orthologue model additions with current genomic model -->
  <target name="merge-orthologue-model" depends="prepare-genomic-model">
  	<merge-genomic-additions additionsFile="${model}/orthologue/orthologue_additions.xml"/>
  </target>

  <!-- PROTEIN_STRUCTURE MODEL GENERATION -->

  <target name="convert-protein_structure" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmlschema" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.name" value="protein_structure"/>
      <property name="namespace" value="http://www.flymine.org/model/protein_structure#"/>
    </ant>
  </target>

  <!-- merge protein_structure model additions with current genomic model -->
  <target name="merge-protein_structure-model" depends="prepare-genomic-model, convert-protein_structure">
    <merge-genomic-additions additionsFile="${model}/protein_structure/protein_structure_additions.xml"/>
  </target>

  <!-- PSI MODEL GENERATION -->

  <!-- convert PSI-DEV XML-Schema to InterMine model XML -->
  <target name="convert-psi" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmlschema" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.name" value="psi"/>
      <property name="namespace" value="http://www.flymine.org/model/psi#"/>
    </ant>
  </target>

  <!-- merge psi model additions with current genomic model -->
  <target name="merge-psi-model" depends="prepare-genomic-model, convert-psi">
    <merge-genomic-additions additionsFile="${model}/psi/psi_additions.xml"/>
  </target>

  <!-- SHORTCUTS -->

  <!-- merge additional shortcut fields with genomic model -->
  <target name="merge-shortcuts" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/genomic/shortcuts.xml"/>
  </target>


  <!-- PHENOTYPE MODEL GENERATION -->
  <target name="merge-phenotype-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/phenotype/phenotype_additions.xml"/>
  </target>


  <!-- FlyReg MODEL GENERATION -->

  <!-- merge flyreg model additions with current genomic model -->
  <target name="merge-flyreg-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/flyreg/flyreg_additions.xml"/>
  </target>

  <!-- Long Oligo MODEL GENERATION -->

  <!-- merge long_oligo model additions with current genomic model -->
  <target name="merge-long_oligo-model" depends="prepare-genomic-model">
     <merge-genomic-additions additionsFile="${model}/long_oligo/long_oligo_additions.xml"/>
  </target>

  <!-- Tiling Path MODEL GENERATION -->

  <!-- merge tiling_path model additions with current genomic model -->
  <target name="merge-tiling_path-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/tiling_path/tiling_path_additions.xml"/>
  </target>

  <!-- UNIPROT MODEL GENERATION -->

  <!-- convert UNIPROT XML-Schema to InterMine model XML -->
  <target name="convert-uniprot" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmlschema" inheritRefs="true">
      <property name="model.name" value="uniprot"/>
      <property name="pkg" value="org.flymine.model.uniprot"/>
      <property name="build.model.dir" value="${build.model}/uniprot"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge uniprot model additions with current genomic model -->
  <target name="merge-uniprot-model" depends="prepare-genomic-model, convert-uniprot">
    <merge-genomic-additions additionsFile="${model}/uniprot/uniprot_additions.xml"/>
  </target>


  <!-- DROSDEL MODEL GENERATION -->
  <target name="merge-drosdel-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/drosdel/drosdel_additions.xml"/>
  </target>


  <!-- create merged model from core genomic model and all model additions -->
  <target name="create-production-model" depends="remove-genomic, prepare-build-model,
                merge-go-model, merge-so-model, merge-uniprot-model,
                merge-psi-model, merge-rnai-model,
                merge-ensembl-model, merge-phenotype-model,
                merge-protein_structure-model, merge-orthologue-model,
                merge-flyreg-model, merge-tiling_path-model, merge-long_oligo-model,
                merge-chado-model, merge-homophila-model, merge-interpro-model,
                merge-cdnaclone-model, merge-drosdel-model, merge-mage-model, merge-shortcuts">
  </target>

  <!-- create class files from a model in an ObjectStore -->
  <target name="compile-genomic-model-from-db" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="db.name" value="db.production"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create java objects for the genomic model -->
  <target name="compile-genomic-model" depends="create-production-model">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="jar-genomic" depends="compile-genomic-model"
          description="create a jar of the genomic model">
    <ant antfile="${build}/build-model.xml" target="jar" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- copy genomic.xml to build/genomic/genomic_model.xml -->
  <target name="prepare-genomic-model" depends="prepare">
    <copy file="${model}/genomic/core.xml" tofile="${build.model}/genomic/genomic_model.xml"/>
  </target>

  <!-- remove build/model/genomic/genomic_model.xml -->
  <target name="remove-genomic">
    <delete file="${build.model}/genomic/genomic_model.xml" failonerror="false"/>
  </target>


  <!-- ========== DATA LOADING PIPELINE - ORGANISED BY SOURCE ========== -->

  <!-- INTERPRO PIPELINE -->
  <target name="build-interpro-production"
            depends="init-paths, retrieve-interpro, translate-interpro, load-interpro, update-equivalent-interpro-features"/>

  <target name="build-interpro10-production"
          depends="init-paths, build-interpro-prod-database, retrieve-interpro, translate-interpro, load-interpro, update-equivalent-interpro-features"/>

  <target name="build-interpro-prod-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/interpro/resources/buildInterproSummaryDbFromInterproReleaseDb.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/interpro_prod"
         userid="rns"
         password="rns"
         src="${build.resources}/buildInterproSummaryDbFromInterproReleaseDb.sql"/>
  </target>

  <target name="build-db-interpro-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.interpro-src-items-std"/>
    </ant>
  </target>

  <target name="build-db-interpro-tgt-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.interpro-tgt-items-std"/>
    </ant>
  </target>

  <target name="retrieve-interpro" depends="convert-interpro, build-db-interpro-src-items">
    <taskdef name="retrieve-interpro" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <retrieve-interpro database="db.interpro" model="interpro" osName="osw.interpro-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.interpro-src-items-std"/>
    </ant>
   </target>

  <target name="translate-interpro"
          depends="prepare-build-model, compile-interpro-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.interpro-tgt-items-std"/>
    </ant>

    <copy file="${model}/interpro/interpro_mappings" toDir="${build.model}/interpro"/>

    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.InterproDataTranslator"
                    source="os.interpro-src-items"
                    target="osw.interpro-tgt-items"
                    srcModel="interpro"
                    tgtModel="genomic"/>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.interpro-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-interpro" depends="compile-genomic-java-from-db, copy-flymine-config">

    <taskdef name="load-ipro" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-ipro integrationWriter="integration.production" source="os.interpro-translated" sourceName="interpro"/>
  </target>

  <!-- ENSEMBL DROSOPHILA PIPELINE -->

  <!-- build ensembl drosophila src items database -->
  <target name="build-db-ensembl-dros-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-src-items"/>
      <property name="objectstore.name" value="os.ensembl-dros-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl drosophila data -->
  <target name="retrieve-ensembl-drosophila" depends="convert-ensembl, build-db-ensembl-dros-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-drosophila" model="ensembl" osName="osw.ensembl-dros-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-dros-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl drosophila -->
  <target name="translate-ensembl-drosophila" depends="convert-ensembl, compile-ensembl-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-dros-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl/ensembl_mappings" toDir="${build.model}/ensembl"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblDataTranslator"
                    source="os.ensembl-dros-src-items"
                    target="osw.ensembl-dros-tgt-items"
                    srcModel="ensembl"
                    tgtModel="genomic"
                    organism="DM"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-dros-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl-dros-tgt-items into production -->
  <target name="load-ensembl-drosophila" depends="prepare-build-model, copy-flymine-config">
    <taskdef name="load-dros" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-dros integrationWriter="integration.production" source="os.ensembl-dros-translated" sourceName="ensembl-dros"/>
  </target>


  <!-- ENSEMBL ANOPHELES PIPELINE -->

  <target name="build-ensembl-anoph-small-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/ensembl/resources/make_small_ensembl_anoph_set.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/ensembl_anoph_small"
         userid="rns"
         password="rns"
         src="${build.resources}/make_small_ensembl_anoph_set.sql"/>
  </target>

  <target name="build-ensembl-anoph-clean-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/ensembl/resources/make_clean_ensembl_anoph_set.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/ensembl_anoph_clean"
         userid="rns"
         password="rns"
         src="${build.resources}/make_clean_ensembl_anoph_set.sql"/>
  </target>

   <target name="build-ensembl-hs-small-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/ensembl/resources/make_small_ensembl_hs.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/ensembl_hs_small"
         userid="rns"
         password="rns"
         src="${build.resources}/make_small_ensembl_hs.sql"/>
  </target>

 <target name="build-ensembl-mm-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/ensembl/resources/make_ensembl_mm.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/ensembl_mm"
         userid="rns"
         password="rns"
         src="${build.resources}/make_ensembl_mm.sql"/>
  </target>


  <!-- retrieve ensembl anopheles data -->
  <target name="retrieve-ensembl-hs" depends="convert-ensembl, build-db-ensembl-human-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-human" 
                      model="ensembl" 
                      osName="osw.ensembl-human-src-items" 
                      excludeList="dna"/>


    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-human-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl anopheles -->
  <target name="translate-ensembl-hs" depends="convert-ensembl, compile-ensembl-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-human-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-human-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl/ensembl_mappings" toDir="${build.model}/ensembl"/>

    <copy file="${model}/genomic/resources/flymine/ensembl_config.properties" toDir="${build.model}/ensembl"/>

    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblDataTranslator"
                    source="os.ensembl-human-src-items"
                    target="osw.ensembl-human-tgt-items"
                    srcModel="ensembl"
                    tgtModel="genomic"
                    organism="HS"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-human-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-human-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <!-- build ensembl anopheles src items database -->
  <target name="build-db-ensembl-anoph-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-src-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-src-items-std"/>
    </ant>
  </target>

  <target name="build-db-ensembl-anoph-tgt-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-tgt-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl anopheles data -->
  <target name="retrieve-ensembl-anopheles" depends="convert-ensembl, build-db-ensembl-anoph-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-anopheles" model="ensembl" osName="osw.ensembl-anoph-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-anoph-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl anopheles -->
  <target name="translate-ensembl-anopheles" depends="convert-ensembl, compile-ensembl-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl/ensembl_mappings" toDir="${build.model}/ensembl"/>

    <copy file="${model}/genomic/resources/flymine/ensembl_config.properties" toDir="${build.model}/ensembl"/>

    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblDataTranslator"
                    source="os.ensembl-anoph-src-items"
                    target="osw.ensembl-anoph-tgt-items"
                    srcModel="ensembl"
                    tgtModel="genomic"
                    organism="AGP"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-anoph-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl anopheles tgt items into production -->
  <target name="load-ensembl-anopheles" depends="prepare-build-model, copy-flymine-config">
    <taskdef name="load-anoph" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-anoph integrationWriter="integration.production" source="os.ensembl-anoph-translated" sourceName="ensembl-anoph" ignoreDuplicates="true"/>
  </target>


  <!-- ENSEMBL HONEY BEE PIPELINE -->

    <target name="build-ensembl-apis-mellifera-small-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/ensembl/resources/make_small_ensembl_apis_mellifera_set.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/ensembl_apis_mellifera_small"
         userid="rns"
         password="rns"
         src="${build.resources}/make_small_ensembl_apis_mellifera_set.sql"/>
  </target>

    <target name="build-ensembl-apis-mellifera-clean-database" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${model}/ensembl/resources/make_clean_ensembl_apis_mellifera_set.sql"
          overwrite="true"/>
    <sql classpathref="models.class.path"
         driver="com.mysql.jdbc.Driver"
         url="jdbc:mysql://gollum:3306/ensembl_apis_mellifera_clean"
         userid="rns"
         password="rns"
         src="${build.resources}/make_clean_ensembl_apis_mellifera_set.sql"/>
  </target>

  <!-- build ensembl apis-mellifera src items database -->
  <target name="build-db-ensembl-apis-mellifera-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-apis-mellifera-src-items"/>
      <property name="objectstore.name" value="os.ensembl-apis-mellifera-src-items-std"/>
    </ant>
  </target>

  <target name="build-db-ensembl-apis-mellifera-tgt-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-apis-mellifera-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-apis-mellifera-tgt-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl apis-mellifera data -->
  <target name="retrieve-ensembl-apis-mellifera" depends="convert-ensembl, build-db-ensembl-apis-mellifera-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-apis-mellifera" model="ensembl" osName="osw.ensembl-apis-mellifera-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-apis-mellifera-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl apis-mellifera -->
  <target name="translate-ensembl-apis-mellifera" depends="convert-ensembl, compile-ensembl-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-apis-mellifera-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-apis-mellifera-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl/ensembl_mappings" toDir="${build.model}/ensembl"/>

    <copy file="${model}/genomic/resources/flymine/ensembl_config.properties" toDir="${build.model}/ensembl"/>

    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <translate-data translator="org.flymine.dataconversion.EnsemblDataTranslator"
                    source="os.ensembl-apis-mellifera-src-items"
                    target="osw.ensembl-apis-mellifera-tgt-items"
                    srcModel="ensembl"
                    tgtModel="genomic"
                    organism="AM"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-apis-mellifera-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-apis-mellifera-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl apis-mellifera tgt items into production -->
  <target name="load-ensembl-apis-mellifera" depends="prepare-build-model, copy-flymine-config">
    <taskdef name="load-apis-mellifera" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <!--Remember that the sourceName is the name space of the model !!!-->
    <load-apis-mellifera
      integrationWriter="integration.production"
      source="os.ensembl-apis-mellifera-translated"
      sourceName="ensembl_apis_mellifera"
      ignoreDuplicates="true"
    />
  </target>

  <!-- DROSDEL PIPELINE -->

  <target name="build-drosdel-production"
          depends="compile-genomic-java-from-db, retrieve-drosdel, translate-drosdel, load-drosdel"/>


  <!-- build drosdel src items database -->
  <target name="build-db-drosdel-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.drosdel-src-items"/>
      <property name="objectstore.name" value="os.drosdel-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve drosdel data -->
  <target name="retrieve-drosdel" depends="build-db-drosdel-src-items">
    <taskdef name="retrieve-drosdel" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-drosdel database="db.drosdel" model="drosdel" osName="osw.drosdel-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.drosdel-src-items-std"/>
    </ant>
  </target>

  <!-- translate drosdel -->
  <target name="translate-drosdel" depends="compile-drosdel-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.drosdel-tgt-items"/>
      <property name="objectstore.name" value="os.drosdel-tgt-items-std"/>
    </ant>
    <copy file="${model}/drosdel/drosdel_mappings" toDir="${build.model}/drosdel"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.DrosdelDataTranslator"
                    source="os.drosdel-src-items"
                    target="osw.drosdel-tgt-items"
                    srcModel="drosdel"
                    tgtModel="genomic"
                    organism="DM"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.drosdel-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.drosdel-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from drosdel tgt items into production -->
  <target name="load-drosdel" depends="prepare-build-model, copy-flymine-config">
    <taskdef name="load" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load integrationWriter="integration.production" source="os.drosdel-translated" sourceName="drosdel"/>
  </target>


  <!-- CHADO PIPELINE -->

  <!-- Build Chado src items database -->
  <target name="build-db-chado-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-src-items"/>
      <property name="objectstore.name" value="os.chado-src-items-std"/>
    </ant>
  </target>


  <target name="filter-chado" depends="prepare-build-model, compile-chado-java, compile-flymine-java">
    <taskdef
      name="filter-chado"
      classname="org.flymine.dataconversion.FilterChadoTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-chado tgtDir="${build.tmp}/dmel">
      <fileset dir="${flybase.chado.melanogaster}/gff">
        <include name="*.gff"/>
      </fileset>
    </filter-chado>
    <filter-chado tgtDir="${build.tmp}/dpse">
      <fileset dir="${flybase.chado.pseudoobscura}/gff">
        <include name="*.gff"/>
      </fileset>
    </filter-chado>
  </target>

  <!-- filter only chromosome 4 of Drosophila for creating small databases -->
  <target name="filter-chado-small"
          depends="prepare-build-model, compile-genomic-java, compile-chado-java, compile-flymine-java">
    <taskdef
      name="filter-chado"
      classname="org.flymine.dataconversion.FilterChadoTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-chado tgtDir="${build.tmp}/dmel">
      <fileset dir="${flybase.chado.melanogaster}/gff">
        <include name="*-4-*.gff"/>
      </fileset>
    </filter-chado>
  </target>

  <!--load retrieve chado GFF3 data-->
  <macrodef name="retrieve-chado">
    <attribute name="organismAbbrev"/>
    <attribute name="dataSetTitle"/>
    <attribute name="gffFileDir"/>
    <sequential>
      <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
        <property name="model.name" value="genomic"/>
        <reference torefid="class.path" refid="models.class.path"/>
        <property name="db.name" value="db.common-tgt-items"/>
        <property name="objectstore.name" value="os.chado-tgt-items-std"/>
      </ant>

      <taskdef name="convert-file" classname="org.flymine.task.GFF3ConverterTask">
        <classpath refid="models.class.path"/>
      </taskdef>

      <convert-file converter="org.flymine.dataconversion.GFF3Converter"
                    target="osw.chado-tgt-items"
                    seqClsName="Chromosome"
                    orgAbbrev="@{organismAbbrev}"
                    dataSourceName="FlyBase"
                    dataSetTitle="@{dataSetTitle}"
                    model="genomic"
                    handlerClassName="org.flymine.dataconversion.ChadoGFF3RecordHandler">
        <fileset dir="@{gffFileDir}">
          <include name="*.gff"/>
        </fileset>
      </convert-file>

      <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
        <property name="model.name" value="genomic"/>
        <reference torefid="class.path" refid="models.class.path"/>
        <property name="os.alias" value="os.chado-tgt-items-std"/>
      </ant>

      <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
        <property name="db.name" value="db.common-tgt-items"/>
        <reference torefid="class.path" refid="models.class.path"/>
      </ant>
    </sequential>
  </macrodef>

  <target name="retrieve-and-load-chado-melanogaster"
          depends="prepare-build-model, copy-flymine-config, compile-genomic-model, compile-chado-java">
    <retrieve-chado dataSetTitle="FlyBase Drosophila melanogaster data set"
                    organismAbbrev="DM" gffFileDir="${build.tmp}/dmel"/> 
    <taskdef name="load-chado" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-chado integrationWriter="integration.production" source="os.chado-translated" sourceName="flybase-dmel" ignoreDuplicates="false"/>
  </target>

  <target name="retrieve-and-load-chado-pseudoobscura"
          depends="prepare-build-model, copy-flymine-config, compile-genomic-model, compile-chado-java">
    <retrieve-chado dataSetTitle="FlyBase Drosophila pseudoobscura data set"
                    organismAbbrev="DP" gffFileDir="${build.tmp}/dpse"/>
    <taskdef name="load-chado" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-chado integrationWriter="integration.production" source="os.chado-translated" sourceName="flybase-dpse" ignoreDuplicates="false"/>
  </target>

  <target name="build-flybase-production"
          depends="compile-genomic-java-from-db, filter-chado,
                   retrieve-and-load-chado-melanogaster, retrieve-and-load-chado-pseudoobscura"/>

  <!-- build a production DB from Chado chromosome 4 - for testing -->
  <target name="build-flybase-production-small"
          depends="compile-genomic-java-from-db, filter-chado-small,
                   retrieve-and-load-chado-melanogaster"/>


  <!-- INPARANOID ORTHOLOGUES PIPELINE -->

  <!-- retrieve inparanoid orthologue data into common tgt items database -->
  <target name="retrieve-orthologues-inparanoid" depends="prepare-build-model, compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.InparanoidConverter"
                  osName="osw.inparanoid-orthologue-tgt-items"
                  model="genomic">
      <fileset dir="${shared.data}/orthologues/inparanoid/2005-04-16/" includes="longsqltable.*"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from inparanoid orthologues into production -->
  <target name="load-orthologues-inparanoid" depends="copy-flymine-config">
    <taskdef name="load-orthologue" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-orthologue integrationWriter="integration.production"
                     source="os.inparanoid-orthologue-translated"
                     sourceName="orthologue-inparanoid"
                     ignoreDuplicates="true"/>
  </target>

  <target name="load-orthologues-inparanoid-mouse" depends="copy-stemcell-config">
    <taskdef name="load-orthologue" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-orthologue integrationWriter="integration.production"
                     source="os.inparanoid-orthologue-translated"
                     sourceName="orthologue-inparanoid"
                     ignoreDuplicates="true"/>
  </target>


  <!-- RNAi PIPELINE -->

  <!-- Build RNAi src items database -->

  <!-- retrieve rnai data into src items database -->
  <path id="rnai.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${model}/rnai/resources"/>
  </path>

  <target name="retrieve-rnai" depends="prepare, compile-rnai-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.rnai-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="rnai.class.path"/>
    </taskdef>
    <convert-file clsName="org.flymine.dataconversion.RNAiConverter"
                  osName="osw.rnai-tgt-items"
                  model="rnai">
      <fileset dir="${shared.data}/rnai" includes="*Set.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.rnai-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-rnai" depends="copy-flymine-config">
    <taskdef name="load-rnai" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-rnai integrationWriter="integration.production" source="os.rnai-translated" sourceName="rnai"/>
  </target>

  <!-- load RNAI into production -->
  <target name="build-rnai-production" depends="retrieve-rnai, load-rnai"/>

  <!-- HOMOPHILA PIPELINE -->

  <!-- Build homophila tgt items database -->

  <target name="retrieve-homophila" depends="prepare, compile-homophila-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.homophila-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-file clsName="org.flymine.dataconversion.HomophilaConverter"
                  osName="osw.homophila-tgt-items" model="homophila"
                  diseaseFile="${shared.data}/homophila/current/homophila_diseases.txt"
                  proteinGeneFile="${shared.data}/homophila/current/protein_gene.txt">
      <fileset dir="${shared.data}/homophila/current" includes="homophila_matches.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.homophila-tgt-items-std"/>
    </ant>
  </target>
  <target name="load-homophila" depends="copy-flymine-config">
    <taskdef name="load-homophila" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-homophila integrationWriter="integration.production" source="os.homophila-translated" sourceName="homophila"/>
  </target>

  <!-- load homophila into production -->
  <target name="build-homophila-production" depends="retrieve-homophila, load-homophila"/>


  <!-- BDGP CDNACLONE PIPELINE -->

  <!-- Build bdgp cdnaclone tgt items database -->

  <target name="build-db-cdnaclone-tgt-items" depends="prepare">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.cdnaclone-tgt-items-std"/>
    </ant>
  </target>

  <target name="retrieve-cdnaclone-bdgp" depends="prepare, compile-cdnaclone-java, build-db-cdnaclone-tgt-items">
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-file clsName="org.flymine.dataconversion.BDGPCloneConverter"
                  osName="osw.cdnaclone-tgt-items"
                  model="cdnaclone">
      <fileset dir="${shared.data}/bdgp_clones/" includes="dgc2flybase.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.cdnaclone-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-cdnaclone" depends="copy-flymine-config">
    <taskdef name="load-cdnaclone" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-cdnaclone integrationWriter="integration.production"
                    source="os.cdnaclone-translated"
                    sourceName="cdnaclone"/>
  </target>

  <!-- load BDGP/CDNA clone data into production -->
  <target name="build-cdnaclone-bdgp-production" depends="retrieve-cdnaclone-bdgp, load-cdnaclone"/>


  <!-- PHENOTYPE PIPELINE -->

  <!-- load phenotype data -->
  <target name="retrieve-phenotype" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.phenotype-tgt-items-std"/>
    </ant>
    <taskdef name="retrieve-phenotype" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-phenotype file="${model}/phenotype/phenotype.ontology" osName="osw.phenotype-tgt-items" termClass="http://www.flymine.org/model/genomic#Phenotype" dagName="Phenotype"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.phenotype-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <target name="load-phenotype"  depends="copy-flymine-config">
    <taskdef name="load-phenotype" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-phenotype integrationWriter="integration.production" source="os.phenotype-translated" sourceName="phenotype"/>
  </target>

  <target name="build-phenotype-production" depends="retrieve-phenotype, load-phenotype"/>

  <!-- PSI PIPELINE -->

  <!-- load psi dag data -->
  <target name="retrieve-psi-dag" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-dag-tgt-items-std"/>
    </ant>
    <taskdef name="retrieve-psi-dag" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <retrieve-psi-dag file="${model}/psi/psi-mi.dag" osName="osw.psi-dag-tgt-items" termClass="http://www.flymine.org/model/genomic#ProteinInteractionTerm" dagName="PSI-MI"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-dag-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-psi-dag"  depends="copy-flymine-config">
    <taskdef name="load-psi-dag" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-psi-dag integrationWriter="integration.production" source="os.psi-dag-translated" sourceName="psi-dag"/>
  </target>

  <target name="retrieve-psi-hybrigenics" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.psi-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/psi/psi.xsd" model="psi" osName="osw.psi-src-items">
      <fileset dir="${shared.data}/psi">
        <include name="droso*.xml"/>
      </fileset>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>
  </target>

  <target name="retrieve-psi-intact" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.psi-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/psi/psi.xsd"
                 model="psi"
                 osName="osw.psi-src-items">
      <fileset dir="${shared.data}/psi/intact/2006-04-09">
        <include name="caeel*.xml"/>
        <include name="drome*.xml"/>
        <include name="yeast*.xml"/>
      </fileset>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>
  </target>

  <target name="translate-psi" depends="compile-psi-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-tgt-items-std"/>
    </ant>
    <copy file="${model}/psi/psi_mappings" toDir="${build.model}/psi"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.PsiDataTranslator"
                    source="os.psi-src-items"
                    target="osw.psi-tgt-items"
                    srcModel="psi"
                    tgtModel="genomic"
                    organisms="7227 6239 4932"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>
  </target>

  <target name="load-psi-hybrigenics"  depends="copy-flymine-config">
    <taskdef name="load-psi" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-psi integrationWriter="integration.production" source="os.psi-translated" sourceName="psi-hybrigenics" ignoreDuplicates="true"/>
  </target>

  <target name="load-psi-intact" depends="copy-flymine-config">
    <taskdef name="load-psi" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-psi integrationWriter="integration.production"
              source="os.psi-translated"
              sourceName="psi-intact"
              ignoreDuplicates="true"/>
  </target>

  <!--target name="build-psi-production" depends="retrieve-psi-dag, load-psi-dag, retrieve-psi-hybrigenics, translate-psi, load-psi-hybrigenics, retrieve-psi-intact, translate-psi, load-psi-intact"/-->
  <target name="build-psi-production" depends="retrieve-psi-dag, load-psi-dag, retrieve-psi-intact, translate-psi, load-psi-intact, link-related-proteins-and-interactions"/>

  <!-- TAXONOMY PIPELINE -->

  <target name="retrieve-taxonomy" depends="prepare-build-model, compile-taxonomy-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.taxonomy-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.TaxonomyConverter"
                  osName="osw.taxonomy-tgt-items" model="genomic">
      <fileset dir="${shared.data}/taxonomy" includes="taxonomy.dat"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-taxonomy"  depends="copy-flymine-config">
    <taskdef name="load-taxonomy" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-taxonomy integrationWriter="integration.production" source="os.taxonomy-translated" sourceName="taxonomy"/>
  </target>

  <target name="build-taxonomy-production" depends="retrieve-taxonomy, load-taxonomy"/>

  <!-- MAGE PIPELINE -->
  <path id="mage.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${build.tmp}/mage"/>
    <fileset dir="${model}/mage/">
      <include name="lib/*.jar"/>
      <include name="resources/MAGE-ML.dtd"/>
    </fileset>
  </path>


  <!-- build mage src items database -->
  <target name="build-db-mage-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.mage-src-items-std"/>
    </ant>
  </target>

  <target name="build-db-mage-tgt-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.mage-tgt-items-std"/>
    </ant>
  </target>
  <target name="retrieve-mage-timecourse" depends="prepare, prepare-build-model, compile-mage-java, convert-mage">
    <!-- MAGEstk toolkit wants write access to source files (?) -->
    <copy todir="${build.tmp}/mage">
      <fileset dir="${shared.data}/mage/E-FLYC-6"/>
    </copy>

    <copy file="${model}/mage/resources/MAGE-ML.dtd" todir="${build.tmp}/mage"/>

    <taskdef name="add-derived-data" classname="org.flymine.dataconversion.AddDerivedDataTask">
      <classpath refid="mage.class.path"/>
    </taskdef>

    <add-derived-data srcFile="${build}/tmp/mage/yale.xml" tgtFile="${build}/tmp/mage/yale.xml" extension="_normalised"/>
  </target>


  <target name="retrieve-mage" depends="prepare, prepare-build-model, compile-mage-java, convert-mage, build-db-mage-src-items">
    <!-- MAGEstk toolkit wants write access to source files (?) -->
    <delete dir="${build}/tmp/mage"/>

    <!-- Timecourse data is a special case it needs normalised data to be added to files first -->
    <antcall target="retrieve-mage-timecourse"/>

    <copy todir="${build.tmp}/mage">
      <fileset dir="${shared.data}/mage/E-FLYC-1"/>
      <fileset dir="${shared.data}/mage/E-FLYC-2"/>
      <fileset dir="${shared.data}/mage/E-FLYC-3"/>
    </copy>

    <copy file="${model}/mage/resources/MAGE-ML.dtd" todir="${build.tmp}/mage"/>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="mage.class.path"/>
    </taskdef>

    <convert-file osName="osw.mage-src-items"
                  clsName="org.flymine.dataconversion.MageConverter"
                  model="mage"
                  quantitationtypes="Signal med ratio">
      <fileset dir="${build.tmp}/mage/">
        <include name="*.xml"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-src-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <target name="translate-mage" depends="convert-mage, compile-genomic-java-from-db, compile-mage-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.mage-tgt-items-std"/>
    </ant>
    <copy file="${model}/mage/mage_mappings" toDir="${build.model}/mage"/>
    <copy file="${model}/genomic/resources/flymine/mage_config.properties" toDir="${build.model}/genomic"/>
    <echo message="CLASSPATH: ${models.class.path}"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.MageDataTranslator"
                    source="os.mage-src-items"
                    target="osw.mage-tgt-items"
                    srcModel="mage"
                    tgtModel="genomic"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-mage" depends = "prepare-build-model, copy-flymine-config">
    <taskdef name="load-mage" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-mage integrationWriter="integration.production"
               source="os.mage-translated"
               sourceName="mage"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-mage-production" depends="retrieve-mage, translate-mage, load-mage"/>

  <!-- PROTEIN_STRUCTURE PIPELINE -->

  <target name="retrieve-protein_structure" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.protein_structure-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/protein_structure/protein_structure.xsd"
                 model="protein_structure"
                 osName="osw.protein_structure-src-items">
      <fileset dir="${shared.data}/kenji" includes="**/*.xml"/>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.protein_structure-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="translate-protein_structure" depends="prepare-build-model, compile-protein_structure-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.protein_structure-tgt-items-std"/>
    </ant>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.ProteinStructureDataTranslator"
                    source="os.protein_structure-src-items"
                    target="osw.protein_structure-tgt-items"
                    srcModel="protein_structure"
                    tgtModel="genomic"
                    dataLocation="${shared.data}/kenji/data/pfam-3d/model/"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.protein_structure-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-protein_structure"  depends="copy-flymine-config">
    <taskdef name="load-protein_structure" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-protein_structure integrationWriter="integration.production" source="os.protein_structure-translated" sourceName="protein_structure" ignoreDuplicates="true"/>
  </target>

  <target name="build-protein_structure-production" depends="retrieve-protein_structure, translate-protein_structure, load-protein_structure"/>

  <!-- GO PIPELINE -->

  <!-- load go dag data -->
  <target name="retrieve-go-dag" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-go-dag" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-go-dag file="${shared.data}/gene_ontology/gene_ontology.obo" osName="osw.go-dag-tgt-items" termClass="http://www.flymine.org/model/genomic#GOTerm" dagName="GO"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-dag-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-go-dag"  depends="copy-genomic-config">
    <taskdef name="load-go-dag" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-go-dag integrationWriter="integration.production" source="os.go-dag-translated" sourceName="go"/>
  </target>

  <target name="retrieve-go-annotation" depends="prepare-build-model, compile-go-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <copy file="${shared.data}/gene_ontology/gene_ontology.obo" toDir="${build.model}/go"/>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter" model="genomic"
                  ontology="${build}/model/go/gene_ontology.obo"
                  geneAttribute="identifier">
      <fileset dir="${shared.data}/go-annotation/">
        <include name="mgi/2006-04-15/gene_association.mgi"/>
        <include name="sgd/2006-04-19/gene_association.sgd"/>
        <include name="rgd/2006-03-26/gene_association.rgd"/>
        <include name="uniprot/2006-03-04/gene_association_ag"/>
        <include name="uniprot/2006-03-04/gene_association_agp"/>
        <include name="uniprot/2006-03-04/gene_association_am"/>
     </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-annotation-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-go-annotation"  depends="copy-genomic-config">
    <taskdef name="load-go-annotation" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-go-annotation integrationWriter="integration.production"
                        source="os.go-annotation-translated"
                        sourceName="goa"
                        ignoreDuplicates="true"/>
  </target>

  <!-- wormbase/flybase go annotation needs to set Gene.organismDbId and use appropriate key -->
  <target name="retrieve-go-annotation-organismdbid" depends="prepare-build-model, compile-go-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <copy file="${shared.data}/gene_ontology/gene_ontology.obo" toDir="${build.model}/go"/>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter" model="genomic"
                  ontology="${build}/model/go/gene_ontology.obo"
                  geneAttribute="organismDbId">
      <fileset dir="${shared.data}/go-annotation/">
        <include name="wormbase/2006-03-12/gene_association.wb"/>
        <include name="flybase/2006-03-26/gene_association.fb"/>
     </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-annotation-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-go-annotation-organismdbid"  depends="copy-genomic-config">
    <taskdef name="load-go-annotation" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-go-annotation integrationWriter="integration.production"
                        source="os.go-annotation-translated"
                        sourceName="goa-organismdbid"
                        ignoreDuplicates="true"/>
  </target>

  <target name="build-go-production" depends="retrieve-go-dag, load-go-dag, retrieve-go-annotation, load-go-annotation, retrieve-go-annotation-organismdbid, load-go-annotation-organismdbid"/>

  <!--load GFF3 data for flyreg -->
  <target name="retrieve-flyreg"
          depends="prepare-build-model, compile-flyreg-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.flyreg-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.flyreg-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="DM"
                   dataSourceName="FlyReg"
                   dataSetTitle="FlyReg data set"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.FlyRegGFF3RecordHandler">
      <fileset dir="${shared.data}/flyreg">
        <include name="*.gff3"/>
        <include name="*.GFF3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.flyreg-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-flyreg"
          depends="copy-flymine-config, prepare-build-model, compile-flyreg-java, compile-genomic-java">
    <taskdef name="load-flyreg" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-flyreg integrationWriter="integration.production"
                 source="os.flyreg-translated"
                 sourceName="flyreg"
                 ignoreDuplicates="false"/>
  </target>

  <target name="build-flyreg-production" depends="retrieve-flyreg, load-flyreg"/>

  <!--load GFF3 data for long_oligo -->
  <target name="retrieve-long_oligo"
          depends="prepare-build-model, compile-long_oligo-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.long_oligo-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.long_oligo-tgt-items"
                   seqClsName="Transcript"
                   orgAbbrev="DM"
                   dataSourceName="INDAC"
                   dataSetTitle="INDAC long oligo data set"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.LongOligoGFF3RecordHandler">
      <fileset dir="${shared.data}/long_oligo">
        <include name="*.gff3"/>
        <include name="*.GFF3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.long_oligo-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-long_oligo"
          depends="copy-flymine-config, prepare-build-model, compile-long_oligo-java, compile-genomic-java">
    <taskdef name="load-long_oligo" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-long_oligo integrationWriter="integration.production"
                 source="os.long_oligo-translated"
                 sourceName="long_oligo"
                 ignoreDuplicates="false"/>
  </target>

  <target name="build-long_oligo-production" depends="retrieve-long_oligo, load-long_oligo"/>

  <!--load GFF3 data for tiling_path -->
  <target name="retrieve-tiling_path"
          depends="prepare-build-model, compile-tiling_path-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.tiling_path-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.tiling_path-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="DM"
                   dataSourceName="Genetics"
                   dataSetTitle="Department of Genetics tiling path"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.TilingPathGFF3RecordHandler">
      <fileset dir="${shared.data}/tiling">
        <include name="*.gff3"/>
        <include name="*.GFF3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.tiling_path-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-tiling_path"
          depends="copy-flymine-config, prepare-build-model, compile-tiling_path-java, compile-genomic-java">
    <taskdef name="load-tiling_path" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-tiling_path integrationWriter="integration.production"
                 source="os.tiling_path-translated"
                 sourceName="tiling_path"
                 ignoreDuplicates="false"/>
  </target>

  <target name="build-tiling_path-production" depends="retrieve-tiling_path, load-tiling_path"/>


  <!-- LOAD STATIC DATA -->

  <!-- Load organism XML data into production database -->
 <target name="load-static-flymine" depends="prepare-build-model, copy-flymine-config">
    <taskdef name="load-xml-data"
      classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <property name="flymine.data" value="model/genomic/data/flymine"/>

    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${flymine.data}/datasets.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${flymine.data}/organisms.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${flymine.data}/rnai-codes.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${flymine.data}/ontologies.xml" sourceName="static"/>
  </target>


  <target name="filter-uniprot" depends="prepare-build-model, compile-uniprot-java">
    <taskdef
      name="filter-uniprot"
      classname="org.flymine.dataconversion.UniprotFilterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

  <filter-uniprot tgtDir="${build.tmp}" organisms="6239 7165 180454 7460 4932">
      <fileset dir="${shared.data}/uniprot/7.7">
        <include name="uniprot_sprot*"/>
        <include name="uniprot_trembl*"/>
      </fileset>
    </filter-uniprot>
  </target>
  
  <target name="filter-uniprot-stemcell" depends="prepare-build-model, compile-uniprot-java">
    <taskdef
      name="filter-uniprot"
      classname="org.flymine.dataconversion.UniprotFilterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

  <filter-uniprot tgtDir="${build.tmp}" organisms="9606 10090">
      <fileset dir="${shared.data}/uniprot/7.5">
        <include name="uniprot_sprot*"/>
        <include name="uniprot_trembl*"/>
      </fileset>
    </filter-uniprot>
  </target>
  
  <target name="retrieve-uniprot" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.uniprot-src-items-std"/>
    </ant>

    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-xml schema="${model}/uniprot/uniprot.xsd"
                 model="uniprot"
                 osName="osw.uniprot-src-items">
      <fileset dir="${build.tmp}">
        <include name="*_filtered.xml"/>
      </fileset>
    </convert-xml>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.uniprot-src-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="translate-uniprot"
          depends="prepare-build-model, compile-uniprot-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.uniprot-tgt-items-std"/>
    </ant>

    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.UniprotDataTranslator"
                    source="os.uniprot-src-items"
                    target="osw.uniprot-tgt-items"
                    srcModel="uniprot"
                    tgtModel="genomic"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.uniprot-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-uniprot"  depends="copy-flymine-config">
    <taskdef name="load-uniprot" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-uniprot integrationWriter="integration.production"
                  source="os.uniprot-translated"
                  sourceName="uniprot"
                  ignoreDuplicates="true"/>
  </target>

  <target name="filter-uniprot-dros" depends="prepare-build-model, compile-uniprot-java">
    <taskdef name="filter-uniprot"
             classname="org.flymine.dataconversion.UniprotFilterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-uniprot tgtDir="${build.tmp}" organisms="7227 7237">
      <fileset dir="${shared.data}/uniprot/7.7">
        <include name="uniprot_sprot*"/>
        <include name="uniprot_trembl*"/>
      </fileset>
    </filter-uniprot>
  </target>

  <target name="load-uniprot-dros"  depends="copy-flymine-config">
    <taskdef name="load-uniprot" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-uniprot integrationWriter="integration.production"
                  source="os.uniprot-translated"
                  sourceName="uniprot-dros"
                  ignoreDuplicates="true"/>
  </target>

  <target name="build-uniprot-dros-production"
          depends="filter-uniprot-dros, retrieve-uniprot, translate-uniprot, load-uniprot-dros"/>

  <target name="build-uniprot-production"
          depends="filter-uniprot, retrieve-uniprot, translate-uniprot, load-uniprot"/>


  <!-- BUILD PRODUCTION DATABASE -->

  <target name="copy-genomic-config" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="copy-keydefs" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="copy-flymine-config" depends="prepare-build-model">
    <property name="model.name" value="genomic"/>
    <copy todir="${build.model}/${model.name}" failonerror="false">
      <fileset dir="${model}/${model.name}/resources">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
      <fileset dir="${model}/${model.name}/resources/flymine">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-t1dmine-config" depends="prepare-build-model">
    <property name="model.name" value="genomic"/>
    <copy todir="${build.model}/${model.name}" failonerror="false">
      <fileset dir="${model}/${model.name}/resources">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
      <fileset dir="${model}/${model.name}/resources/t1dmine">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
    </copy>
  </target>

 <target name="copy-stemcell-config" depends="prepare-build-model">
    <property name="model.name" value="genomic"/>
    <copy todir="${build.model}/${model.name}" failonerror="false">
      <fileset dir="${model}/${model.name}/resources">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
      <fileset dir="${model}/${model.name}/resources/stemcell">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
    </copy>
  </target>
  <!-- NOTE - following target updates model and other metadata in production database.
       If the model has changed then this can be really bad.  Should be used with extreme caution if
       absolutely confident that changes will not put model/details out of sync with schema. -->
 <target name="update-metadata-flymine-production" depends="copy-flymine-config">
        <!-- compile-genomic-model-->
        <!-- compile-genomic-human-model-->
    <taskdef name="db-insert-model"
             classname="org.intermine.task.StoreMetadataTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <db-insert-model database="db.production" modelName="genomic"/>
  </target>
  <target name="update-metadata-t1dmine-production" depends="copy-t1dmine-config">
        <!-- compile-genomic-model-->
        <!-- compile-genomic-human-model-->
    <taskdef name="db-insert-model"
             classname="org.intermine.task.StoreMetadataTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <db-insert-model database="db.production" modelName="genomic"/>
  </target>

  <target name="update-metadata-stemcell-production" depends="copy-stemcell-config">
        <!-- compile-genomic-model-->
        <!-- compile-genomic-model-stemcell-->
    <taskdef name="db-insert-model"
             classname="org.intermine.task.StoreMetadataTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <db-insert-model database="db.production" modelName="genomic"/>
  </target>
  <!-- Build genomic model database to hold production data -->
  <target name="build-db-production" depends="compile-genomic-model, copy-flymine-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
    <antcall target="create-indexes-production"/>
  </target>

  <target name="create-indexes-production"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
  </target>

  <target name="create-indexes-production-attribute"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.production"/>
      <property name="create.attribute.indexes" value="true"/>
    </ant>
  </target>

  <!-- drop all precomputed tables -->
  <target name="drop-precomputed-tables-production"
          depends="prepare, prepare-genomic-model">
    <taskdef name="drop-precomputed-tables"
             classname="org.intermine.task.DropPrecomputedTablesTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <drop-precomputed-tables alias="os.production"/>
  </target>

  <!-- create selected precomputed tables in the production database -->
  <target name="precompute-production-queries"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="build/build-model.xml" target="precompute-model" inheritRefs="true">
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.name" value="genomic"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create selected precomputed tables in the production database and test
       the speed of queries -->
  <target name="precompute-production-queries-test"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="build/build-model.xml" target="precompute-model-test" inheritRefs="true">
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.name" value="genomic"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create selected precomputed tables in the production database -->
  <target name="precompute-production-templates"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <ant antfile="build/build-model.xml" target="precompute-templates" inheritRefs="true">
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.name" value="genomic"/>
      <property name="precompute.minRows" value="0"/>
      <property name="userprofile.name" value="osw.userprofile-production"/>
      <property name="username" value="${superuser.account}"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <!-- LOAD PRODUCTION DATA -->

  <!-- Translates and loads ensembl drosophila data -->
  <target name="build-ensembl-drosophila-production"
          depends="retrieve-ensembl-drosophila,translate-ensembl-drosophila,load-ensembl-drosophila"/>

  <!-- Translates and loads ensembl anopheles data -->
  <target name="build-ensembl-anopheles-production"
          depends="retrieve-ensembl-anopheles,translate-ensembl-anopheles,load-ensembl-anopheles"/>

  <!-- Translates and loads ensembl apis-mellifera data -->
  <target name="build-ensembl-apis-mellifera-production"
          depends="retrieve-ensembl-apis-mellifera,translate-ensembl-apis-mellifera,load-ensembl-apis-mellifera"/>

  <!-- Retrieve and load orthologue data -->
  <target name="build-orthologues-production"
          depends="retrieve-orthologues-inparanoid,load-orthologues-inparanoid"/>

  <!-- build production database - assumes that ensembl databases already retrieved -->
  <target name="production-build"
          depends="create-production-model,
                   compile-genomic-model,
                   jar-genomic,
                   build-db-production,
                   create-indexes-production,
                   load-static-flymine,
                   build-flybase-production,
                   read-flybase-chromosome-fasta,
                   build-ensembl-anopheles-production,
                   build-uniprot-production,
                   build-rnai-production,
                   build-homophila-production,
                   build-psi-production,
                   build-orthologues-production,
                   build-phenotype-production,
                   build-go-production,
                   build-protein_structure-production,
                   analyse-db-production,
                   grant-db-production"/>

  <target name="analyse-db-production" depends="prepare">
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.production"/>
      <property name="full" value="true"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="analyse-protein-production" depends="prepare">
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.production"/>
      <property name="model" value="genomic"/>
      <property name="className" value="org.flymine.model.genomic.Protein"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="grant-db-production" depends="prepare">
    <!-- grant 'public' user select permission on production db -->
    <taskdef name="grant" classname="org.intermine.task.GrantTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <grant database="db.production" user="PUBLIC" perm="SELECT"/>

  </target>


  <!-- ========== POST PROCESSING TARGETS ========== -->
  <target name="link-related-proteins-and-interactions" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="link-related-proteins-and-interactions" objectStoreWriter="osw.production"/>
  </target>

  <target name="update-equivalent-interpro-features" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="update-equivalent-interpro-features" objectStoreWriter="osw.production"/>
  </target>

  <target name="calculate-locations" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="calculate-locations" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-chromosome-locations-and-lengths" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-chromosome-locations-and-lengths"
              objectStoreWriter="osw.production"/>
  </target>

  <target name="create-oligo-locations" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-oligo-locations" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-intergenic-region-features" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-intergenic-region-features" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-overlap-relations-flymine" depends="compile-genomic-java-from-db">
    <taskdef name="create-overlap-relations"
             classname="org.flymine.postprocess.CreateOverlapRelationsTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <create-overlap-relations objectStoreWriter="osw.production"
                              ignoreSelfMatches="false"
                              classesToIgnore="Primer, Contig, CDS, Chromosome, ChromosomeBand, Enhancer, Exon, FivePrimeUTR, Intron, MRNA, PCRProduct, PolyASite, Pseudogene, RRNA, RegulatoryRegion, RepeatRegion, Supercontig, ThreePrimeUTR, TranscriptionStartSite, TransposableElementInsertionSite"/>
  </target>

  <target name="create-overlap-relations-t1dmine" depends="compile-genomic-java-from-db">
    <taskdef name="create-overlap-relations"
             classname="org.flymine.postprocess.CreateOverlapRelationsTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <create-overlap-relations objectStoreWriter="osw.production"
                              ignoreSelfMatches="true"
                              classesToIgnore="Primer, Contig, CDS, Chromosome, ChromosomeBand, Enhancer, Exon, FivePrimeUTR, Intron, MRNA, PCRProduct, PolyASite, ProteinBindingSite, Pseudogene, RRNA, RegulatoryRegion, RepeatRegion, Supercontig, TFBindingSite, ThreePrimeUTR, Transcript, TranscriptionStartSite, TransposableElementInsertionSite"/>
  </target>
 <target name="create-overlap-relations-stemcell" depends="compile-genomic-java-from-db">
    <taskdef name="create-overlap-relations"
             classname="org.flymine.postprocess.CreateOverlapRelationsTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <create-overlap-relations objectStoreWriter="osw.production"
                              ignoreSelfMatches="true"
                              classesToIgnore="Contig, Supercontig, Chromosome, ChromosomeBand, Clone, Scaffold, Exon, RepeatRegion, Transcript, TranscriptionStartSite, Marker, CrossGenomeMatch, TRNA, Promoter, CpGIsland"/>
  </target>

  <target name="create-references" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-references" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-symmetrical-relation-references" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-symmetrical-relation-references"
              objectStoreWriter="osw.production"/>
  </target>

  <target name="create-utr-references" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-utr-references" objectStoreWriter="osw.production"/>
  </target>

  <target name="make-spanning-locations" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="make-spanning-locations" objectStoreWriter="osw.production"/>
  </target>

  <target name="transfer-sequences-chromosome" depends="compile-genomic-java-from-db">
    <taskdef name="transfer-sequences" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <transfer-sequences operation="transfer-sequences-chromosome" 
                        objectStoreWriter="osw.production"/>
  </target>

  <target name="transfer-sequences-located-sequence-feature" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="transfer-sequences-located-sequence-feature"
              objectStoreWriter="osw.production"/>
  </target>

  <target name="transfer-sequences-transcripts" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="transfer-sequences-transcripts" objectStoreWriter="osw.production"/>
  </target>

  <target name="update-publications" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="update-publications" objectStore="os.production" outputFile="${build.tmp}/publications.xml"/>

    <taskdef name="load-xml-data"
      classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${build.tmp}/publications.xml"
                   sourceName="pubmed"
                   ignoreDuplicates="true"/>
  </target>

 <target name="add-licences" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="add-licences" objectStoreWriter="osw.production"/>
  </target>

  <target name="update-orthologues" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="update-orthologues" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-flybase-linkins" depends="compile-genomic-java-from-db">
    <taskdef name="link-ins" classname="org.flymine.util.LinkInTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <link-ins objectStore="os.production" outputFile="${build.model}/genomic/FlyBaseToFlyMine" database="flybase"/>
  </target>

  <target name="create-flybase-to-uniprot-refs" depends="compile-genomic-java-from-db">
    <taskdef name="fb-uniprot-refs" classname="org.flymine.postprocess.FlyBaseUniProtRefsTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <fb-uniprot-refs linkFile="${flybase.uniprot.link.file}"
                     objectStoreWriter="osw.production"/>
  </target>

  <target name="homophila-post-process" depends="compile-genomic-java-from-db">
    <taskdef name="homophila-post-process" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <homophila-post-process operation="homophila-post-process" objectStoreWriter="osw.production"/>
  </target>

  <target name="set-collection-counts" depends="compile-genomic-java-from-db">
     <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
       <classpath refid="models.class.path"/>
     </taskdef>
     <mappings operation="set-collection-counts" objectStoreWriter="osw.production"/>
   </target>

    <target name="create-intron-features" depends="compile-genomic-java-from-db">
     <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
       <classpath refid="models.class.path"/>
     </taskdef>
     <mappings operation="create-intron-features" objectStoreWriter="osw.production"/>
   </target>

   <target name="set-name-and-wildtypefunction" depends="compile-genomic-java-from-db">
     <taskdef name="tsv-file-reader" classname="org.flymine.task.TSVFileReaderWithSynonymTask">
       <classpath refid="models.class.path"/>
     </taskdef>
     <tsv-file-reader oswAlias="osw.production" organismAbbreviation="DM"
                      configurationFile="model/genomic/resources/flymine/drosophila_fullname_reader.properties"
                      dataSourceName="FlyBase">
       <fileset dir="${flybase.chado.melanogaster}">
         <include name="flyBaseFullNameWT.txt"/>
       </fileset>
     </tsv-file-reader>
   </target>

  <target name="ensembl-post-process">
    <!--    <antcall target="add-licences"/>  -->
    <antcall target="calculate-locations"/>
    <antcall target="create-chromosome-locations-and-lengths"/>
    <antcall target="analyse-db-production"/>
    <antcall target="create-references"/>
    <!--antcall target="homophila-post-process"/-->
    <antcall target="analyse-db-production"/>
    <!--antcall target="update-orthologues"/-->
    <antcall target="analyse-db-production"/>
    <antcall target="make-spanning-locations"/>
    <antcall target="analyse-db-production"/>

    <!-- removed due to running out of memory -->
    <!--antcall target="transfer-sequences"/-->
    <!--antcall target="create-indexes-production-attribute"/-->
    <!--antcall target="analyse-db-production"/-->
  </target>


  <!-- ========== OBJECTSTORE EXPORT TARGETS ========== -->
  <target name="write-gff" depends="compile-genomic-java-from-db">
    <taskdef name="write-gff" classname="org.flymine.gbrowse.WriteGFFTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <write-gff alias="os.production" dest="${build.gbrowse.data}"/>
  </target>

  <!-- ========== COMPILATION AND TESTING TARGETS ========== -->

  <!-- build genomic test database -->
  <target name="build-db-genomic-test" depends="prepare-build-model, prepare-test, copy-flymine-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

  <target name="create-indexes-genomic-test" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="os.alias" value="os.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

  <target name="build-db-fulldatatest" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.fulldatatest"/>
      <property name="objectstore.name" value="os.fulldatatest"/>
    </ant>
  </target>

  <target name="interpro-test" depends="prepare-test, convert-interpro, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="interpro"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-interpro-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="interpro"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-ensembl-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <target name="ensembl-test" depends="prepare-test, convert-ensembl, build-db-fulldatatest">
    <copy todir="${build.model}/ensembl/resources/test" overwrite="true" failonerror="true" >
      <fileset file="${model}/genomic/resources/flymine/ensembl_config.properties/"/>
    </copy>

    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="insert-ensembl-test" depends="prepare-test">
    <taskdef name="insert-xml-data" classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <copy todir="${build.model}/ensembl/resources/test" overwrite="true">
      <fileset dir="${model}/ensembl/resources/test"/>
    </copy>
    <delete file="${build.model}/genomic/objectstoresummary.properties"/>
    <insert-xml-data integrationWriter="integration.genomic-test"
                     xmlFile="${build.model}/ensembl/resources/test/EnsemblDataTranslatorFunctionalTest_tgt.xml"
                     sourceName="ensembl"/>
  </target>

  <target name="compile-chado-java" depends="compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="chado-test" depends="prepare-build-model, convert-chado">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-drosdel-java" depends="compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="drosdel"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-rnai-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="rnai-test" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-homophila-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="homophila"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="homophila-test" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="homophila"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-cdnaclone-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="cdnaclone"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="cdnaclone-test" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="cdnaclone"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="orthologue-test" depends="prepare-build-model, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-go-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="go"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="go-test" depends="prepare-build-model, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="go"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-mage-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="mage-test" depends="prepare-build-model, prepare-test, build-db-fulldatatest">
    <mkdir dir="${build.tmp}/mage"/>
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
    <!-- put model back to how it was -->
    <!--antcall target="compile-genomic-model"/-->

  </target>

  <target name="compile-psi-java" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-flyreg-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="flyreg"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-long_oligo-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="long_oligo"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-tiling_path-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="tiling_path"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-protein_structure-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="protein_structure"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="protein_structure-test" depends="prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="protein_structure"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="psi-test"
          depends="prepare-test, prepare-build-model, build-db-fulldatatest, convert-psi">
    <copy file="${model}/psi/psi.xsd" toDir="${build.model}/psi"/>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="drosdel-test" depends="prepare-test, prepare-build-model, build-db-fulldatatest, compile-genomic-java">
    <copy todir="${build.resources}"
          overwrite="true" verbose="true">
      <fileset dir="${model}/drosdel/resources">
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="drosdel"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="flyreg-test"
           depends="prepare-test, prepare-build-model, build-db-fulldatatest, compile-genomic-java">
     <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
       <property name="model.name" value="flyreg"/>
       <reference torefid="class.path" refid="test.class.path"/>
     </ant>
   </target>

  <target name="compile-taxonomy-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="taxonomy-test" depends="prepare-build-model, compile-taxonomy-java, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-uniprot-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="uniprot"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="uniprot-test" depends="prepare-test, prepare-build-model, build-db-fulldatatest">
    <copy file="${model}/uniprot/uniprot.xsd" toDir="${build.model}/uniprot"/>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="uniprot"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-java" depends="prepare, compile-flymine-java, compile-genomic-model">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-java-from-db"
          depends="compile-genomic-model-from-db, compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="genomic-test-inc" depends="prepare-build-model, prepare-test, compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
    <antcall target="test-report"/>
  </target>

  <target name="genomic-test" depends="compile-genomic-model, genomic-test-inc"/>

  <target name="compile-models-java" depends="prepare-build-model">
    <javac destdir="${build.model}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="models.class.path"/>
      <src path="${model}/"/>
      <include name="**/src/java/**"/>
      <exclude name="genomic/**"/>
    </javac>
  </target>

  <target name="compile-models-test" depends="compile-models-java">
    <javac destdir="${build.model}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="models.class.path"/>
      <src path="${model}/"/>
      <include name="**/src/test/**"/>
      <exclude name="genomic/**"/>
    </javac>
  </target>

  <target name="test-models-inc"
          depends="mage-test, ensembl-test, rnai-test, homophila-test,
                   psi-test, orthologue-test, go-test, interpro-test,
                   flyreg-test, drosdel-test, taxonomy-test, uniprot-test,
                   protein_structure-test, chado-test">
    <antcall target="test-report"/>
  </target>

  <target name="test-models-full" depends="compile-genomic-model, test-models-inc"/>

  <target name="fulltest"
          depends="clean, compile-genomic-model,
                   build-db-genomic-test, create-indexes-genomic-test, test-models-inc,
                   genomic-test, test-flymine-java"
          description="do an incremental test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>

  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>

  <!-- create Sequence objects for BioEntitys from a FASTA file -->


  <target name="read-flybase-chromosome-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="org.flymine.model.genomic.Chromosome" keyFieldName="identifier"
                organismAbbreviation="DM" oswAlias="osw.production">
      <fileset dir="${flybase.chado.melanogaster}/fasta">
        <include name="dmel-all-chromosome-*.fasta"/>
      </fileset>
    </read-fasta>

    <read-fasta className="org.flymine.model.genomic.Chromosome" keyFieldName="identifier"
                organismAbbreviation="DP" oswAlias="osw.production">
      <fileset dir="${flybase.chado.pseudoobscura}/fasta">
        <include name="dpse-all-chromosome-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <!-- load a small chromosome for testing -->
  <target name="read-flybase-chromosome-4-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="org.flymine.model.genomic.Chromosome" keyFieldName="identifier"
                organismAbbreviation="DM" oswAlias="osw.production">
      <fileset dir="${flybase.chado.melanogaster}/fasta">
        <include name="dmel-4-chromosome-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <target name="read-flybase-gene-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="org.flymine.model.genomic.Gene" keyFieldName="identifier"
                organismAbbreviation="DM" oswAlias="osw.production">
      <fileset dir="${flybase.chado.melanogaster}/fasta">
        <include name="dmel-all-gene-*.fasta"/>
      </fileset>
    </read-fasta>
    <read-fasta className="org.flymine.model.genomic.Gene" keyFieldName="identifier"
                organismAbbreviation="DP" oswAlias="osw.production">
      <fileset dir="${flybase.chado.pseudoobscura}/fasta">
        <include name="dpse-all-gene-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <target name="read-flybase-cds-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="org.flymine.model.genomic.CDS" keyFieldName="identifier"
                organismAbbreviation="DM" oswAlias="osw.production" idSuffix="_CDS">
      <fileset dir="${flybase.chado.melanogaster}/fasta">
        <include name="dmel-all-CDS-*.fasta"/>
      </fileset>
    </read-fasta>
    <read-fasta className="org.flymine.model.genomic.CDS" keyFieldName="identifier"
                organismAbbreviation="DP" oswAlias="osw.production" idSuffix="_CDS">
      <fileset dir="${flybase.chado.pseudoobscura}/fasta">
        <include name="pdse-all-CDS-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <target name="read-long_oligo-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="org.flymine.model.genomic.MicroarrayOligo" keyFieldName="identifier"
                organismAbbreviation="DM" oswAlias="osw.production">
      <fileset dir="${shared.data}/long_oligo">
        <include name="indac_1.0.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <!-- Java checkstyle targets -->
  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${model}">
        <include name="**/src/java/**/*.java" />
        <include name="**/web/java/**/*.java" />
        <exclude name="genomic/src/java/**/biojava*/**/*.java" />
      </fileset>
      <fileset dir=".">
        <include name="src/java/**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />
  </target>


  <!-- WEBAPP TARGETS -->

  <target name="build-production-webapp"
          depends="prepare-build-model, compile-flymine-java,
                   compile-genomic-java, create-so-name-to-classname-map">
    <property name="model.css.file" value="model/genomic/resources/web/model.css"/>
    <property name="webapp.properties.file" value="${resources}/webapp/flymine/global.web.properties"/>
    <property name="log4j.properties.file" value="${resources}/webapp/flymine/log4j.properties"/>
    <property name="web.properties.file" value="model/genomic/resources/web/web.properties"/>
    <property name="aspects.properties.file" value="model/genomic/resources/web/aspects.xml"/>
    <property name="model.images.dir" value="model/genomic/resources/web/images"/>

    <unwar src="${intermine.war.path}" dest="${build.webapp}/intermine">
      <patternset>
        <include name="WEB-INF/lib/*.jar"/>
        <include name="WEB-INF/classes/InterMineWebApp.properties"/>
      </patternset>
    </unwar>

    <concat destfile="${build}/tmp/InterMineWebApp.properties">
      <fileset file="${build.webapp}/intermine/WEB-INF/classes/InterMineWebApp.properties"/>
      <fileset file="${model}/genomic/resources/web/model.properties"/>
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
          <param type="token" name="HELP_LOCATION" value="${project.helpLocation}"/>
        </filterreader>
      </filterchain>
    </concat>

    <copy file="${intermine.war.path}" tofile="${dist.webapp}/flymine.war" verbose="true"/>
    <ant antfile="${build}/build-model.xml" target="add-model-to-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="model.name" value="genomic"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.images.dir" value="${model.images.dir}"/>
      <reference torefid="class.path" refid="webapp.class.path"/>
    </ant>

    <copy todir="${build.tmp}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <patternset id="properties-files-for-war">
      <include name="default.intermine.properties"/>
      <include name="InterMineWebApp.properties"/>
    </patternset>
    <ant antfile="${build}/build-webapp.xml" target="add-to-war-classes" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="properties-files-for-war"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${lib}"/>
      <reference torefid="file.names" refid="lib.webapp"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${dist}"/>
      <reference torefid="file.names" refid="lib.flymine"/>
    </ant>

    <copy todir="${build.tmp}" file="${build.model}/genomic/objectstoresummary.properties"/>

    <filter token="SITE_PREFIX" value="${www.location}"/>
    <filter token="HELP_LOCATION" value="${project.helpLocation}"/>
    <filter token="SITE_SUPERUSER" value="${superuser.account}"/>
    <filter token="RELEASE_VERSION" value="${release.version}"/>
    <filter token="CACHE_DIR" value="${webapp.cachedir}"/>
    <copy todir="${build.tmp}" filtering="true"
          file="${webapp.properties.file}"
          overwrite="true" verbose="true"/>
    <concat destfile="${build.tmp}/web.properties">
      <fileset file="${web.properties.file}" />
      <fileset file="${build.properties.local}" />
    </concat>
    <copy todir="${build.tmp}" file="${resources}/webapp/flymine/classDescriptions.properties"/>
    <copy todir="${build.tmp}" file="${aspects.properties.file}"/>
    <patternset id="flymine-global-web-properties-patternset">
      <include name="global.web.properties"/>
      <include name="web.properties"/>
      <include name="objectstoresummary.properties"/>
      <include name="classDescriptions.properties"/>
      <include name="soClassName.properties"/>
      <include name="aspects.xml"/>
    </patternset>
    <ant antfile="${build}/build-webapp.xml" target="add-to-war-webinf" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="flymine-global-web-properties-patternset"/>
    </ant>

    <filter token="LOG_DIR" value="${webapp.logdir}"/>
     <copy todir="${build.tmp}" filtering="true" overwrite="true">
       <fileset file="${log4j.properties.file}"/>
     </copy>
     <patternset id="flymine-logging-properties-patternset">
       <include name="log4j.properties"/>
     </patternset>
     <ant antfile="${build}/build-webapp.xml" target="add-to-war-classes" inheritRefs="true">
       <property name="war" value="${dist.webapp}/flymine.war"/>
       <property name="file.dir" value="${build.tmp}"/>
       <reference torefid="file.names" refid="flymine-logging-properties-patternset"/>
     </ant>
  </target>

  <target name="release-webapp" depends="no-dep, prepare-build-model"
          description="release the webapp to the server">
    <ant antfile="${build}/build-webapp.xml" target="release-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>
  </target>

  <target name="remove-webapp" depends="no-dep, prepare-build-model"
          description="remove the webapp from the server">
    <ant antfile="${build}/build-webapp.xml" target="remove-webapp" inheritRefs="true">
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>
  </target>

  <target name="build-db-userprofile" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.userprofile-production"/>
      <property name="objectstore.name" value="os.userprofile-production"/>
    </ant>
  </target>

  <target name="create-indexes-userprofile-production"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.userprofile-production"/>
      <property name="objectstore.name" value="os.userprofile-production"/>
    </ant>
  </target>

  <target name="create-indexes-userprofile-production-attribute"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.userprofile-production"/>
      <property name="create.attribute.indexes" value="true"/>
    </ant>
  </target>

  <!-- load default global template queries -->
  <target name="load-default-templates" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="insert-default-templates" classname="org.intermine.web.task.LoadDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <insert-default-templates templatesXml="model/genomic/resources/web/template-queries.xml"
                              username="${superuser.account}"
                              osAlias="os.production"
                              userProfileAlias="osw.userprofile-production"/>
  </target>

  <!-- dump default global template queries -->
  <target name="dump-default-templates" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true"
          verbose="true"/>
    <taskdef name="dump-default-templates" classname="org.intermine.web.task.DumpDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <dump-default-templates fileName="${build.tmp}/template-queries.xml"
                            username="${superuser.account}"
                            osAlias="os.production"
                            userProfileAlias="osw.userprofile-production"/>
  </target>

  <!-- write the userprofile database to a file as XML -->
  <target name="write-production-userprofile-xml"
          depends="prepare-test, prepare-build-model">
    <taskdef name="write-userprofile-xml" classname="org.intermine.web.task.ProfileWriteTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <write-userprofile-xml fileName="${build}/tmp/userprofile.xml" osAlias="os.production"
                           userProfileAlias="osw.userprofile-production"/>
  </target>

  <!-- read the userprofile database from a file as XML -->
  <target name="read-production-userprofile-xml"
          depends="prepare-test, prepare-build-model">
    <taskdef name="read-userprofile-xml" classname="org.intermine.web.task.ProfileReadTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <read-userprofile-xml fileName="${build}/tmp/userprofile.xml" osAlias="os.production"
                          userProfileAlias="osw.userprofile-production"
                          source="userprofile_port"/>
  </target>


  <target name="build-production-webservice-client" depends="compile-genomic-model">
    <jar destfile="${dist}/flymine-webservice-client.jar">
      <zipfileset src="${webservice-client.jar.path}"/>
      <fileset dir="${resources}/webservice-client" includes="default.intermine.properties"/>
      <fileset dir="${build.model}/genomic"/>
    </jar>
  </target>

  <target name="build-production-webservice" depends="prepare"> <!-- depends="jar-genomic" -->
    <unwar src="${webservice.war.path}" dest="${build.webapp}/webservice">
      <patternset>
        <include name="WEB-INF/lib/*.jar"/>
				<include name="WEB-INF/web.xml"/>
      </patternset>
    </unwar>
    <copy file="${runtime.properties.local}" toFile="${build.tmp}/WEB-INF/intermine.properties"/>
    <copy file="${webservice.war.path}" toFile="${dist.webapp}/webservice.war"/>
		<war destfile="${dist.webapp}/webservice.war" webxml="${build.webapp}/webservice/WEB-INF/web.xml" update="true">
      <lib dir="${dist}" includes="intermine-genomic.jar" />
      <classes file="${resources}/webapp/default.intermine.properties"/>
      <classes file="${build.tmp}/WEB-INF/intermine.properties"/>
    </war>
  </target>

  <target name="release-webservice" depends="prepare"
          description="release the webservice to the server">
    <ant antfile="${build}/build-webapp.xml" target="release-webservice" inheritRefs="true">
      <property name="war" value="${dist.webapp}/webservice.war"/>
      <reference torefid="class.path" refid="webservice.class.path"/>
    </ant>
  </target>

  <target name="remove-webservice" depends="prepare"
          description="release the webservice to the server">
    <ant antfile="${build}/build-webapp.xml" target="remove-webservice" inheritRefs="true">
      <property name="war" value="${dist.webapp}/webservice.war"/>
      <reference torefid="class.path" refid="webservice.class.path"/>
    </ant>
  </target>

  <!-- GBROWSE TARGETS -->

  <target name="install-gbrowse-conf"
          description="copy the FlyMine/GBrowse configuration file to the gbrowse.conf directory">
    <filter token="FLYMINE_WEBAPP_VIEW_BY_ID_PREFIX"
            value="${webapp.baseurl}/${webapp.path}/${webapp.viewByID.prefix}"/>
    <filter token="WEBAPP_PREFIX" value="${webapp.baseurl}/${webapp.path}"/>
    <filter token="FLYMINE_SITE_PREFIX" value="${project.sitePrefix}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE" value="${gbrowse.database}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_HOST" value="${gbrowse.database.host}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_ADAPTOR" value="${gbrowse.database.adaptor}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_USER" value="${gbrowse.database.user}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_PASSWORD" value="${gbrowse.database.password}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_ADAPTOR" value="${gbrowse.database.adaptor}"/>
    <filter token="PROJECT_TITLE" value="${project.title}"/>
    <filter token="PROJECT_VERSION" value="${project.releaseVersion}"/>
    <filter token="PROJECT_SUBTITLE"
            value="${project.subTitle}"/>
    <filter token="PROJECT_FUNDED_BY" value="${project.funded.by}"/>
    <filter token="PROJECT_CONTACT" value="${project.contact}"/>

    <copy file="${model}/genomic/resources/gbrowse/${project.title}.conf"
          toFile="${build.gbrowse}/${gbrowse.database.source}.conf"
          filtering="true" overwrite="true"/>

    <copy toDir="${build.gbrowse.images}">
      <fileset dir="${model}/genomic/resources/gbrowse/images">
        <include name="*.gif"/>
      </fileset>
    </copy>

    <chmod perm="a+r">
      <fileset dir="${build.gbrowse.images}">
        <include name="*.gif"/>
      </fileset>
    </chmod>

    <chmod perm="a+xr">
      <fileset dir="${build.gbrowse.images}">
        <include name="**"/>
      </fileset>
    </chmod>

    <chmod perm="a+r">
      <fileset dir="${build.gbrowse}">
        <include name="${gbrowse.database.source}.conf"/>
      </fileset>
    </chmod>

    <exec executable="rsync">
      <arg line="-e ssh -avz ${build.gbrowse}/${gbrowse.database.source}.conf ${gbrowse.config.directory}/" />
    </exec>

    <exec executable="rsync">
      <arg line="-e ssh -avz ${build.gbrowse.images} ${gbrowse.www.directory}/images/buttons/" />
    </exec>
  </target>

  <target name="load-gbrowse-data"
          description="call bp_load_gff.pl to load the FlyMine GFF dump into GBrowse">
    <exec dir="${build.gbrowse.data}" executable="bp_load_gff.pl">
      <arg value="--adaptor"/>
      <arg value="dbi::Pg"/>
      <arg value="--create"/>
      <arg value="--dsn"/>
      <arg value="dbi:Pg:dbname=${gbrowse.database};host=${gbrowse.database.host}"/>
      <arg value="--user"/>
      <arg value="${gbrowse.database.write.user}"/>
      <arg value="--password"/>
      <arg value="${gbrowse.database.write.password}"/>
    </exec>
    <apply dir="${build.gbrowse.data}" executable="bp_load_gff.pl">
      <arg value="--adaptor"/>
      <arg value="dbi::Pg"/>
      <arg value="--dsn"/>
      <arg value="dbi:Pg:dbname=${gbrowse.database};host=${gbrowse.database.host}"/>
      <arg value="--user"/>
      <arg value="${gbrowse.database.write.user}"/>
      <arg value="--password"/>
      <arg value="${gbrowse.database.write.password}"/>
      <fileset dir="${build.gbrowse.data}">
        <patternset>
          <include name="*.fa"/>
          <include name="*.gff"/>
        </patternset>
      </fileset>
    </apply>
  </target>

  <target name="load-gbrowse-data-mysql"
          description="call bp_bulk_load_gff.pl to load the FlyMine GFF dump into GBrowse">
    <exec executable="/bin/sh">
      <arg line="-c 'bp_bulk_load_gff.pl --maxfeature 1000000000 --create --database dbi:mysql:${gbrowse.database}\;host=${gbrowse.database.host} --user ${gbrowse.database.write.user} --password ${gbrowse.database.write.password} ${build.gbrowse.data}/*.{fa,gff}'"/>
    </exec>
  </target>

  <!-- MODEL COMPILATION TARGETS -->

  <target name="compile-acedb-model" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-ace" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-chado-model" depends="convert-chado">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-ensembl-model" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-mage-model" depends="convert-mage">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="create-so-name-to-classname-map" depends="compile-genomic-java">
    <taskdef name="create-so-name-to-classname-map"
             classname="org.flymine.task.SOClassNameMapMakerTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <create-so-name-to-classname-map soFile="${model}/so/sofa.obo"
                                     outputFile="${build.tmp}/soClassName.properties"/>
  </target>
  <!-- ============================================================================== -->

  <!-- Targets for the non-model Java -->


  <target name="compile-flymine-java" depends="prepare">
    <javac destdir="${build.java}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="base.class.path"/>
      <src path="${build.src.java}"/>
      <src path="${src.java}"/>
    </javac>
  </target>

  <target name="test-flymine-java" depends="compile-flymine-java, compile-test">
    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure" reloading="false">
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}" includes="**/*Test.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- JAVADOC TARGETS -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="FlyMine API" additionalparam="-breakiterator">
      <classpath refid="base.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>FlyMine</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} FlyMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- DOT TASKS -->

  <target name="dot-acedb" depends="compile-acedb-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-chado" depends="compile-chado-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-ensembl" depends="compile-ensembl-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-mage" depends="compile-mage-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-genomic" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- PACKAGING/DISTRIBUTION TARGETS -->

  <target name="dist-javadoc" depends="prepare,javadoc"
          description="makes the javadoc available for distribution">
    <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>


  <!-- CLEAN TARGETS -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir=".">
        <include name="junit*.properties"/>
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.resources}"/>
    <delete>
      <fileset dir=".">
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
        <include name="build/**/*.java"/>
        <include name="build/**/*.class"/>
      </fileset>
    </delete>
    <antcall target="prepare" />
  </target>

  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <!-- ANTDOC TARGET -->
  <target name="ant-doc">
    <taskdef name="AntDoc" classname="org.ed.pack.ant.AntDoc">
      <classpath refid="base.class.path"/>
    </taskdef>
    <AntDoc destination="${results.antdoc}" buildfile="${ant.file}"/>
  </target>


  <!-- ============================== TIDMINE/STEM CELL TARGETS ================================================= -->
 <target name="build-db-genomic-test-stemcell" depends="prepare-build-model, prepare-test, copy-stemcell-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

  <target name="build-db-genomic-test-t1dmine" depends="prepare-build-model, prepare-test, copy-t1dmine-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

 <target name="compile-genomic-java-t1dmine" depends="compile-flymine-java, compile-genomic-model-t1dmine">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-java-stemcell"
         depends="compile-flymine-java, compile-genomic-model-stemcell">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <target name="load-static-t1dmine" depends="prepare-build-model, copy-t1dmine-config">
    <taskdef name="load-xml-data"
             classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <property name="t1dmine.data" value="model/genomic/data/t1dmine"/>

    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${t1dmine.data}/datasets.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${t1dmine.data}/organisms.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${t1dmine.data}/ontologies.xml" sourceName="static"/>
  </target>

  <target name="load-static-stemcell" depends="prepare-build-model, copy-stemcell-config">
    <taskdef name="load-xml-data"
             classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <property name="stemcellmine.data" value="model/genomic/data/stemcellmine"/>

    <!--load-xml-data integrationWriter="integration.production"
                   xmlFile="${stemcellmine.data}/datasets.xml" sourceName="static"/-->
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${stemcellmine.data}/organisms.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production"
                   xmlFile="${stemcellmine.data}/ontologies.xml" sourceName="static"/>
  </target>
  <!-- ENSEMBL HUMAN  CORE MODEL GENERATION -->

  <!-- convert ensembl human zargo to InterMine model -->
  <target name="convert-ensembl-human" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the ensembl model additions with the current genomic model -->
  <target name="merge-ensembl-human-model" depends="convert-ensembl-human, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/ensembl-human/ensembl-human_additions.xml"/>
  </target>


 <!-- MERGED GENOMIC T1DMine MODEL  -->

 <!-- create t1d genomic model from core and all additions files -->
  <target name="create-production-model-t1dmine"
          depends="remove-genomic, prepare-build-model,
                merge-psi-model, merge-rnai-model,
                merge-ensembl-human-model, merge-phenotype-model, merge-go-model,
                merge-uniprot-model, merge-protein_structure-model, merge-tfbs-model,
                merge-firstef-model, merge-region-model,merge-diseaseregion-model,
                merge-so-model, merge-tiling_path-model, merge-long_oligo-model,
                merge-ensembl-disease-model,
                merge-mage-model, merge-cdnaclone-model,
                merge-orthologue-model,
                merge-chado-model, merge-shortcuts">
  </target>


  <!-- create java objects for the genomic human model-->
  <target name="compile-genomic-model-t1dmine" depends="create-production-model-t1dmine">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <!-- MERGED GENOMIC StemCellMine MODEL  -->

 <!-- create stem cell genomic model from core and all additions files -->
  <target name="create-production-model-stemcell"
          depends="remove-genomic, prepare-build-model,
                merge-psi-model, merge-rnai-model,
                merge-ensembl-human-model, merge-phenotype-model, merge-go-model,
                merge-uniprot-model, merge-protein_structure-model, merge-tfbs-model,
                merge-firstef-model, merge-region-model,
                merge-so-model, merge-tiling_path-model, merge-long_oligo-model,
                merge-tfbscluster-model, merge-mage-model, merge-cdnaclone-model,
                merge-orthologue-model,
                merge-chado-model, merge-shortcuts">
  </target>


  <!-- create java objects for the genomic stemcell model-->
  <target name="compile-genomic-model-stemcell" depends="create-production-model-stemcell">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <!-- DATA LOADING PIPELINE -->

  <!-- build ensembl human src items database -->
  <target name="build-db-ensembl-human-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-human-src-items"/>
      <property name="objectstore.name" value="os.ensembl-human-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl human data -->
  <target name="retrieve-ensembl-human"
          depends="convert-ensembl-human, build-db-ensembl-human-src-items">
    <taskdef name="retrieve-ensembl-human" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl-human database="db.ensembl-human" model="ensembl-human" osName="osw.ensembl-human-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-human-src-items-std"/>
    </ant>
  </target>

  
  <!-- translate ensembl human data -->
  <target name="translate-ensembl-human" depends="convert-ensembl-human, compile-ensembl-human-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-human-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-human-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl-human/ensembl-human_mappings" toDir="${build.model}/ensembl-human"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblHumanDataTranslator"
                    source="os.ensembl-human-src-items"
                    target="osw.ensembl-human-tgt-items"
                    srcModel="ensembl-human"
                    tgtModel="genomic"
                    organism="HS"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-human-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-human-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl-human-tgt-items into production -->
  <target name="load-ensembl-human" depends="prepare-build-model, copy-stemcell-config">
    <taskdef name="load-human" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-human integrationWriter="integration.production"
                source="os.ensembl-human-translated"
                sourceName="ensembl-human" 
                ignoreDuplicates="false"/>
               <!--queryClass="org.flymine.model.genomic.Synonym"/-->
  </target>

  <!--LOAD PRODUCTION DATA  -->
  <target name="build-ensembl-human-production"
          depends="retrieve-ensembl-human,translate-ensembl-human,load-ensembl-human"/>
<target name="build-ensembl-hs-production"
          depends="retrieve-ensembl-hs,translate-ensembl-hs,load-ensembl-human"/>

 <!--GENE SYNONYMS FROM ENSEMBL-HUMAN ENSMART-->
  <!--Retrieve gene synonyms for EntrezGene, file is tab separated format -->

  <path id="ensemblhuman.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${model}/ensembl-human/resources"/>
  </path>

  <target name="retrieve-gene-synonyms-for-entrezgene"
          depends="convert-ensembl-human, compile-ensembl-human-java, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gene-synonym-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="ensemblhuman.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.RetrieveGeneSynonym"
                   osName="osw.gene-synonym-tgt-items"
                   model="ensembl-human"
                   synonymtype="entrezGene">
      <fileset dir ="${shared.data}/human/geneSynonym/">
        <include name ="ensembl_entrezgene.tsv"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gene-synonym-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-gene-synonyms-for-entrezgene" depends="copy-stemcell-config">
    <taskdef name="load-gene-synonyms" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gene-synonyms integrationWriter="integration.production"
               source="os.gene-synonym-translated"
               sourceName="gene-synonym"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-gene-synonyms-for-entrezgene-production"
          depends="retrieve-gene-synonyms-for-entrezgene, load-gene-synonyms-for-entrezgene"/>


  <!--Retrieve gene synonyms for CCDS, file is tab separated format -->
  <target name="retrieve-gene-synonyms-for-ccds"
          depends="convert-ensembl-human, compile-ensembl-human-java, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gene-synonym-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="ensemblhuman.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.RetrieveGeneSynonym"
                   osName="osw.gene-synonym-tgt-items"
                   model="ensembl-human"
                   synonymtype="ccds">
      <fileset dir ="${shared.data}/human/geneSynonym/">
        <include name ="ensembl_ccds.tsv"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gene-synonym-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-gene-synonyms-for-ccds" depends="copy-stemcell-config">
    <taskdef name="load-gene-synonyms" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gene-synonyms integrationWriter="integration.production"
               source="os.gene-synonym-translated"
               sourceName="gene-synonym"
               ignoreDuplicates="true"/>
  </target>

  <target name="build-gene-synonyms-for-ccds-production"
          depends="retrieve-gene-synonyms-for-ccds, load-gene-synonyms-for-ccds"/>

<!--Retrieve gene synonyms for embl, file is tab separated format -->
  <target name="retrieve-gene-synonyms-for-embl"
          depends="convert-ensembl-human, compile-ensembl-human-java, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gene-synonym-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="ensemblhuman.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.RetrieveGeneSynonym"
                   osName="osw.gene-synonym-tgt-items"
                   model="ensembl-human"
                   synonymtype="embl">
      <fileset dir ="${shared.data}/human/geneSynonym/">
        <include name ="ensembl_embl.tsv"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gene-synonym-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-gene-synonyms-for-embl" depends="copy-stemcell-config">
    <taskdef name="load-gene-synonyms" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gene-synonyms integrationWriter="integration.production"
               source="os.gene-synonym-translated"
               sourceName="gene-synonym"
               ignoreDuplicates="true"/>
  </target>

  <target name="build-gene-synonyms-for-embl-production"
          depends="retrieve-gene-synonyms-for-embl, load-gene-synonyms-for-embl"/>

  <target name="build-gene-synonyms-production"
          depends="build-gene-synonyms-for-ccds-production, build-gene-synonyms-for-entrezgene-production, build-gene-synonyms-for-embl-production"/>

 <!-- BUILD PRODUCTION DATABASE -->

  <!-- Build genomic model database to hold production data -->
  <target name="build-db-production-t1dmine" depends="compile-genomic-model-t1dmine, copy-t1dmine-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
    <antcall target="create-indexes-production"/>
  </target>


   <!-- build production database - assumes that ensembl databases already retrieved -->
  <target name="t1dmine-production-build"
          depends="create-production-model-t1dmine, compile-genomic-model-t1dmine,jar-genomic,
                   build-db-production-t1dmine, load-static-t1dmine,
                   build-ensembl-human-production,
                   build-go-production-human,build-go-production-mouse,build-orthologues-production-mouse,
                   build-tfbs-production,
                   build-firstef-production,build-mousechain-production, build-opposumchain-production,
                   build-regions-production, build-disease-regions-production, build-ensembl-disease-production,
                   build-gene-synonyms-production,
                   build-tfbscluster-production, build-cns-production,
                   build-mage-stemcell-production, build-cdnaclone-image-production,
                   analyse-db-production, grant-db-production"/>


  <!--POST PROCESSING -->
  <target name="fetch-contig-sequences" depends="compile-genomic-java-from-db">
    <taskdef name="fetch-sequences" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <fetch-sequences operation="fetch-contig-sequences-human" objectStoreWriter="osw.production" ensemblDb="db.ensembl-human"/>
  </target>

  <target name="fetch-ensembl-anoph-contig-sequences" depends="compile-genomic-java-from-db">
    <taskdef name="fetch-sequences" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <fetch-sequences operation="fetch-contig-sequences-ensembl" objectStoreWriter="osw.production" ensemblDb="db.ensembl-anopheles"/>
  </target>

  <target name="post-process-t1dmine">
      <antcall target="fetch-contig-sequences"/>
      <antcall target="analyse-db-production"/>
      <antcall target="create-references"/>
      <antcall target="analyse-db-production"/>
      <!-- removed due to running out of memory -->
      <!--antcall target="transfer-sequences-chromosome"/-->
      <!--antcall target="analyse-db-production"/-->
      <!--antcall target="create-indexes-production-attribute"/-->
      <!--antcall target="analyse-db-production"/-->
      <!--antcall target="create-chromosome-locations-and-lengths"/>
      <antcall target="analyse-db-production"/>
      <antcall target="create-overlap-relations-t1dmine"/>
      <antcall target="analyse-db-production"/>
      <antcall target="create-symmetrical-relation-references"/>
      <antcall target="analyse-db-production"/>
      <antcall target="make-spanning-locations"/>
      <antcall target="analyse-db-production"/>
      <antcall target="update-orthologues"/>
      <antcall target="analyse-db-production"/>
      <antcall target="set-collection-counts"/>
      <antcall target="create-intron-features"/>
      <antcall target="update-publications"/>
      <antcall target="analyse-db-production"/-->
  </target>

  <!--COMPILATION AND TESTING TARGETS -->
  <target name="compile-ensembl-human-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="ensembl-human-test"
          depends="prepare-test, convert-ensembl-human, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>


  <target name="test-t1dmine-models-inc"
          depends="ensembl-human-test, go-test,
                   tfbs-test, firstef-test, region-test, diseaseregion-test, ensembl-disease-test,
                   opposumchain-test, tfbscluster-test, mage-test, cdnaclone-test">
    <antcall target="test-report"/>
  </target>

  <target name="test-t1dmine-models-full"
          depends="compile-genomic-model-t1dmine, test-t1dmine-models-inc">
    <antcall target="test-report"/>
  </target>

  <target name="genomic-t1dmine-test" depends="compile-genomic-model-t1dmine, genomic-test-inc"/>

  <target name="t1dminefulltest"
          depends="clean, compile-genomic-model-t1dmine, build-db-genomic-test,
                   create-indexes-genomic-test, test-t1dmine-models-inc, genomic-t1dmine-test"
          description="do an incremental test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>


  <!-- MODEL COMPILATION TARGETS -->
  <target name="compile-ensembl-human-model" depends="convert-ensembl-human">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- GO ANNOTATION FOR HUMAN -->

  <target name="retrieve-go-annotation-human" depends="prepare-build-model, compile-go-java">

    <copy file="${shared.data}/gene_ontology/gene_ontology.obo" toDir="${build.model}/go"/>

    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter"
                  model="genomic"
                  ontology="${build}/model/go/gene_ontology.obo">
      <fileset dir="${shared.data}/go-annotation/uniprot/2006-03-04">
        <include name="gene_association_hs"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-annotation-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="build-go-production-human"
          depends="retrieve-go-dag, load-go-dag, retrieve-go-annotation-human, load-go-annotation"/>


<!-- GO ANNOTATION FOR MOUSE-->

  <target name="retrieve-go-annotation-mouse" depends="prepare-build-model, compile-go-java">

    <copy file="${shared.data}/gene_ontology/gene_ontology.obo" toDir="${build.model}/go"/>

    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter"
                  model="genomic"
                  ontology="${build}/model/go/gene_ontology.obo"
                  geneAttribute="identifier">
      <fileset dir="${shared.data}/go-annotation/mgi/2006-05-06">
        <include name="gene_association.mgi"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-annotation-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="build-go-production-mouse"
          depends="retrieve-go-annotation-mouse, load-go-annotation"/>



<!-- TFBS MODEL GENERATION -->

  <!-- merge tfbs model additions with current genomic model -->
  <target name="merge-tfbs-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/tfbs/tfbs_additions.xml"/>
  </target>

  <target name="tfbs-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="tfbs"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-tfbs-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="tfbs"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!--load TFBS GFF3 data from UCSC-->
  <target name="retrieve-tfbs" depends="prepare-build-model, compile-tfbs-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="UCSC"
                   dataSetTitle="UCSC transcription factor binding sites"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.TfbsGFF3RecordHandler">
      <fileset dir ="${shared.data}/human/tfbs">
        <include name ="tfbsConsSites_withFactors.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-tfbs" depends="copy-stemcell-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="tfbs"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-tfbs-production" depends="retrieve-tfbs, load-tfbs"/>

<!--FirstEF MODEL GENERATION-->

  <!-- merge firstef model additions with current genomic model -->
  <target name="merge-firstef-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/firstef/firstef_additions.xml"/>
  </target>

  <target name="firstef-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="firstef"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-firstef-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="firstef"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!--load firstEF GFF3 data from UCSC-->
  <target name="retrieve-firstef" depends="prepare-build-model, compile-firstef-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="UCSC"
                   dataSetTitle="firstEF"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.FirstEFGFF3RecordHandler">
      <fileset dir ="${shared.data}/human/firstEF">
        <include name ="firstEF.gff3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <target name="load-firstef" depends="copy-stemcell-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="firstef"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-firstef-production" depends="retrieve-firstef, load-firstef"/>

<!--EncodeRegion MODEL GENERATION-->

  <!-- merge encodeRegion model additions with current genomic model -->
  <target name="merge-region-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/region/region_additions.xml"/>
  </target>

  <target name="region-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="region"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-region-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="region"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!--load encodeRegions GFF3 data from UCSC-->
  <target name="retrieve-regions" depends="prepare-build-model, compile-region-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="UCSC"
                   dataSetTitle="UCSC encode regions"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.RegionGFF3RecordHandler">
      <fileset dir ="${shared.data}/human/encodeRegions/">
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-regions" depends="copy-t1dmine-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="region"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-regions-production" depends="retrieve-regions, load-regions"/>

<!--DiseaseRegion MODEL GENERATION-->

  <!-- merge diseaseregion model additions with current genomic model -->
  <target name="merge-diseaseregion-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/diseaseregion/diseaseregion_additions.xml"/>
  </target>

  <target name="diseaseregion-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="diseaseregion"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-diseaseregion-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java-t1dmine">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="diseaseregion"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!--load diseaseRegions GFF3 data from T1DBase-->
  <target name="retrieve-disease-regions" depends="prepare-build-model, compile-diseaseregion-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="T1DBase"
                   dataSetTitle="T1DBase disease regions"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.DiseaseRegionGFF3RecordHandler">
      <fileset dir ="${shared.data}/human/diseaseRegions/">
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-disease-regions" depends="copy-t1dmine-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="diseaseregion"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-disease-regions-production"
          depends="retrieve-disease-regions, load-disease-regions"/>


 <!-- ENSEMBL HUMAN DISEASE MODEL GENERATION -->
  <!-- merge the ensembl model additions with the current genomic model -->
  <target name="merge-ensembl-disease-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/ensembl-disease/ensembl-disease_additions.xml"/>
  </target>

  <target name="compile-ensembl-disease-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ensembl-disease"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="ensembl-disease-test"
          depends="prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl-disease"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <!--load human disease data, tab separated from ensembl EnsMart-->
  <path id="ensembldisease.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${model}/ensembl-disease/resources"/>
  </path>

  <target name="retrieve-ensembl-disease" depends="prepare-build-model, compile-ensembl-disease-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-disease-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="ensembldisease.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.EnsemblDiseaseConverter"
                   osName="osw.ensembl-disease-tgt-items"
                   model="ensembl-disease">
      <fileset dir ="${shared.data}/human/ensemblDisease/">
        <include name ="*.tsv"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-disease-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-ensembl-disease" depends="copy-t1dmine-config">
    <taskdef name="load-ensembl-disease" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-ensembl-disease integrationWriter="integration.production"
               source="os.ensembl-disease-translated"
               sourceName="ensembl-disease"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-ensembl-disease-production"
          depends="retrieve-ensembl-disease, load-ensembl-disease"/>



  <!-- comparativeGenomics model is added to model/genomic/shortcuts.xml -->

  <!--load comparativeGenomics mouseChain GFF3 data from UCSC-->
  <target name="retrieve-mousechain" depends="prepare-build-model, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="UCSC"
                   dataSetTitle="UCSC mouse chain"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.GFF3RecordHandler">
      <fileset dir="${shared.data}/human/comparativeGenomics">
        <include name="mouseChain.gff3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-mousechain" depends="copy-stemcell-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="mousechain"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-mousechain-production" depends="retrieve-mousechain, load-mousechain"/>


  <!-- merge opposum model additions with current genomic model -->
  <path id="opposumchain.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${model}/opposumchain/resources"/>
  </path>
  <!--target name="merge-opposumchain-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/opposumchain/opposumchain_additions.xml"/>
  </target-->

  <target name="opposumchain-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="opposumchain"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <!--target name="compile-opposumchain-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="opposumchain"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target-->

  <!--load comparativeGenomics opposumChain GFF3 data from UCSC-->
  <target name="retrieve-opposumchain" depends="prepare-build-model, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="opposumchain.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="UCSC"
                   dataSetTitle="UCSC opossum chain"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.GFF3RecordHandler">
      <fileset dir ="${shared.data}/human/comparativeGenomics">
        <include name ="opposumChain.gff3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-opposumchain" depends="copy-stemcell-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="opposumchain"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-opposumchain-production" depends="retrieve-opposumchain, load-opposumchain"/>


<!-- TFBSCluster MODEL GENERATION -->

  <!-- merge tfbsCluster model additions with current genomic model -->
  <target name="merge-tfbscluster-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/tfbscluster/tfbscluster_additions.xml"/>
  </target>

  <target name="tfbscluster-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="tfbscluster"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-tfbscluster-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java-stemcell">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="tfbscluster"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!--load TFBSCluster GFF3 data from HSCL-->
  <target name="retrieve-tfbscluster" depends="prepare-build-model, compile-tfbscluster-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="HSCL"
                   dataSetTitle="HSCL transcription factor binding site clusters"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.TfbsClusterGFF3RecordHandler">
      <fileset dir ="${shared.data}/human/tfbscluster/current">
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-tfbscluster" depends="copy-stemcell-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="tfbscluster"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-tfbscluster-production" depends="retrieve-tfbscluster, load-tfbscluster"/>

<!--load TFBS CNS GFF3 data from HSCL, CIMR-->
  <target name="retrieve-cns" depends="prepare-build-model, compile-tfbscluster-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   dataSourceName="HSCL"
                   dataSetTitle="HSCL conserved non-coding sites"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.TfbsClusterGFF3RecordHandler">
      <fileset dir ="${shared.data}/human/cns/2006-05-11/">
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-cns" depends="copy-stemcell-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated"
               sourceName="cns"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-cns-production" depends="retrieve-cns, load-cns"/>


<!-- INPARANOID ORTHOLOGUES PIPELINE hs/mm -->

  <!-- retrieve inparanoid orthologue data into common tgt items database -->
  <target name="retrieve-orthologues-inparanoid-mouse" depends="prepare-build-model, compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.InparanoidConverter"
                  osName="osw.inparanoid-orthologue-tgt-items"
                  model="genomic">
      <fileset dir="${shared.data}/human/orthologues/2005-04-16/"
          includes="sqltable.*"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="build-orthologues-production-mouse"
          depends="retrieve-orthologues-inparanoid-mouse,load-orthologues-inparanoid-mouse"/>

 <!--mage data E-SMDB-3450 for stem cell>
<target name="retrieve-mage-smdb" depends="prepare, prepare-build-model, compile-mage-java, convert-mage">
    <copy todir="${build.tmp}/mage">
       <fileset dir="${shared.data}/human/mage/E-SMDB-3450"/>
    </copy>

    <copy file="${model}/mage/resources/MAGE-ML.dtd" todir="${build.tmp}/mage"/>

    <taskdef name="add-derived-data" classname="org.flymine.dataconversion.AddDerivedDataTask">
      <classpath refid="mage.class.path"/>
    </taskdef>

    <add-derived-data srcFile="${build}/tmp/mage/Exptset_3450.xml" tgtFile="${build}/tmp/mage/Exptset.xml" fileName="03280Table4-1.txt"/>
  </target-->

 <target name="retrieve-mage-stemcell"
         depends="prepare, prepare-build-model, compile-mage-java, convert-mage, build-db-mage-src-items">
    <!-- MAGEstk toolkit wants write access to source files (?)-->
    <delete dir="${build}/tmp/mage"/>
    <copy todir="${build.tmp}/mage">
      <fileset dir="${shared.data}/human/mage/E-MEXP-337"/>
      <fileset dir="${shared.data}/human/mage/E-MEXP-384"/>
    </copy>
    <copy file="${model}/mage/resources/MAGE-ML.dtd" todir="${build.tmp}/mage"/>

    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.mage-src-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="mage.class.path"/>
    </taskdef>

    <convert-file osName="osw.mage-src-items"
                  clsName="org.flymine.dataconversion.MageConverter"
                  model="mage"
                  quantitationtypes="Log2Ratio, Average Expression Level, Fold Change">
      <fileset dir="${build.tmp}/mage/">
        <include name="*.xml"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-src-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="translate-mage-stemcell"
          depends="convert-mage, compile-genomic-java-from-db, compile-mage-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.mage-tgt-items-std"/>
    </ant>
    <copy file="${model}/mage/mage_mappings" toDir="${build.model}/mage"/>
    <copy file="${model}/genomic/resources/stemcell/mage_config.properties" toDir="${build.model}/genomic"/>
    <echo message="CLASSPATH: ${models.class.path}"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.MageDataTranslator"
                    source="os.mage-src-items"
                    target="osw.mage-tgt-items"
                    srcModel="mage"
                    tgtModel="genomic"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-mage-stemcell" depends = "prepare-build-model, copy-stemcell-config">
    <taskdef name="load-mage" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-mage integrationWriter="integration.production"
               source="os.mage-translated"
               sourceName="mage"
               ignoreDuplicates="false"/>
  </target>
   <target name="retrieve-mage-stemcell2"
         depends="prepare, prepare-build-model, compile-mage-java, convert-mage, build-db-mage-src-items">
    <!-- MAGEstk toolkit wants write access to source files (?) >
    <delete dir="${build}/tmp/mage"/>
    <copy todir="${build.tmp}/mage">
      <fileset dir="${shared.data}/human/mage/E-EMBL-1"/>
      <fileset dir="${shared.data}/human/mage/E-MEXP-70"/>
    </copy>
    <copy file="${model}/mage/resources/MAGE-ML.dtd" todir="${build.tmp}/mage"/-->

    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.mage-src-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="mage.class.path"/>
    </taskdef>

    <convert-file osName="osw.mage-src-items"
                  clsName="org.flymine.dataconversion.MageConverter"
                  model="mage"
                  quantitationtypes="Log2Ratio, Average Expression Level, Fold Change">
      <fileset dir="${build.tmp}/mage/">
        <include name="*.xml"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-src-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>    
  </target>
  <target name="load-mage-stemcell2" depends = "prepare-build-model, copy-stemcell-config">
    <taskdef name="load-mage" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-mage integrationWriter="integration.production"
               source="os.mage-translated"
               sourceName="mage2"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-mage-stemcell-production"
          depends="retrieve-mage-stemcell, translate-mage-stemcell, load-mage-stemcell, retrieve-mage-stemcell2, translate-mage-stemcell, load-mage-stemcell2, retrieve-mage-smdb, load-mage-smdb"/>

  <target name="retrieve-mage-smdb"
          depends="prepare, prepare-build-model, compile-mage-java, convert-mage, build-db-mage-tgt-items">

    <copy file="${model}/genomic/resources/stemcell/mage_config.properties" toDir="${build.model}/mage"/>
    <echo message="CLASSPATH: ${models.class.path}"/>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    
    <convert-file clsName="org.flymine.dataconversion.MageFlatFileConverter"
                  osName="osw.mage-tgt-items"
                  model="mage">
      <fileset dir="${shared.data}/human/mage/E-SMDB-3450/" includes="03280Table4-1.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-mage-smdb" depends="copy-stemcell-config">
    <taskdef name="load-mage" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-mage integrationWriter="integration.production"
               source="os.mage-translated"
               sourceName="mage"/>
  </target>

  <target name="build-mage-smdb-production" depends="retrieve-mage-smdb, load-mage-smdb"/>

  <target name="retrieve-mage-timecoursemas"
          depends="prepare, prepare-build-model, compile-mage-java, convert-mage, build-db-mage-tgt-items">

    <copy file="${model}/genomic/resources/stemcell/mage_config.properties" toDir="${build.model}/mage"/>
    <echo message="CLASSPATH: ${models.class.path}"/>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    
    <convert-file clsName="org.flymine.dataconversion.MageTimeCourseMasFileConverter"
                  osName="osw.mage-tgt-items"
                  model="mage">
      <fileset dir="${shared.data}/human/mage/tariq/" includes="FDCP_AP_Calls.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-mage-timecoursemas" depends="copy-stemcell-config">
    <taskdef name="load-mage" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-mage integrationWriter="integration.production"
               source="os.mage-translated"
               sourceName="mage"/>
  </target>

  <target name="build-mage-timecoursemas-production" depends="retrieve-mage-timecoursemas, load-mage-timecoursemas"/>
<!-- CDNACLONE/image PIPELINE -->
  <target name="retrieve-cdnaclone-image" depends="prepare, compile-cdnaclone-java, build-db-cdnaclone-tgt-items">
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-file clsName="org.flymine.dataconversion.ImageCloneConverter"
                  osName="osw.cdnaclone-tgt-items"
                  model="cdnaclone">
      <fileset dir="${shared.data}/human/imageClones/" includes="UnigeneSetRZPD3.1.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.cdnaclone-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-cdnaclone-image" depends="copy-stemcell-config">
    <taskdef name="load-cdnaclone" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-cdnaclone integrationWriter="integration.production"
                    source="os.cdnaclone-translated"
                    sourceName="cdnaclone-image"/>
  </target>

  <!-- load CDNAclone image data into production -->
  <target name="build-cdnaclone-image-production" depends="retrieve-cdnaclone-image, load-cdnaclone-image"/>

  <!-- CDNACLONE/probeset PIPELINE -->
  <target name="retrieve-cdnaclone-probeset"
          depends="prepare, compile-cdnaclone-java, build-db-cdnaclone-tgt-items">
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-file clsName="org.flymine.dataconversion.AffyConverter"
                  osName="osw.cdnaclone-tgt-items"
                  model="cdnaclone">

      <fileset dir="${shared.data}/human/probeSet/"
               includes="*.csv"/>

    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.cdnaclone-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-cdnaclone-probeset" depends="copy-stemcell-config">
    <taskdef name="load-cdnaclone" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-cdnaclone integrationWriter="integration.production"
                    source="os.cdnaclone-translated"
                    sourceName="cdnaclone-probe"/>
  </target>

  <!-- load CDNAclone image data into production -->
  <target name="build-cdnaclone-probeset-production"
          depends="retrieve-cdnaclone-probeset, load-cdnaclone-probeset"/>


  <!--psi intact for stemcell PIPILINE -->
  <target name="retrieve-psi-intact-stemcell" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.psi-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/psi/psi.xsd"
                 model="psi"
                 osName="osw.psi-src-items">
      <fileset dir="${shared.data}/human/psi/intact/2006-05-09">
        <include name="human_rual*.xml"/>
        <include name="human_stelzl*.xml"/>
        <include name="human_small*.xml"/>
        <include name="mouse_small*.xml"/>
       </fileset>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>
  </target>
<target name="translate-psi-intact-stemcell" depends="compile-psi-java, compile-genomic-java-from-db">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-tgt-items-std"/>
    </ant>
    <copy file="${model}/psi/psi_mappings" toDir="${build.model}/psi"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.PsiDataTranslator"
                    source="os.psi-src-items"
                    target="osw.psi-tgt-items"
                    srcModel="psi"
                    tgtModel="genomic"
                    organisms="9606 10090 13616 9615"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>
  </target>
  
  <target name="load-psi-intact-stemcell" depends="copy-stemcell-config">
    <taskdef name="load-psi" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-psi integrationWriter="integration.production"
              source="os.psi-translated"
              sourceName="psi-intact"
              ignoreDuplicates="true"/>
  </target>

  <target name="build-psi-intact-production-stemcell"
          depends="retrieve-psi-intact-stemcell, translate-psi-intact-stemcell, load-psi-intact-stemcell"/>

 <target name="filter-uniprot-hs" depends="prepare-build-model, compile-uniprot-java">
    <taskdef name="filter-uniprot"
             classname="org.flymine.dataconversion.UniprotFilterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-uniprot tgtDir="${build.tmp}" organisms="9606">
      <fileset dir="${shared.data}/uniprot/7.7">
        <include name="uniprot_sprot*"/>
        <include name="uniprot_trembl*"/>
      </fileset>
    </filter-uniprot>
  </target>

  <target name="load-uniprot-hs"  depends="copy-stemcell-config">
    <taskdef name="load-uniprot" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>


    <load-uniprot integrationWriter="integration.production"
                  source="os.uniprot-translated"
                  sourceName="uniprot-hs"
                  ignoreDuplicates="true"/>
  </target>

  <target name="build-uniprot-hs-production"
          depends="filter-uniprot-hs, retrieve-uniprot, translate-uniprot, load-uniprot-hs"/>


  <!--SPLIT T1DMINE FROM FLYMINE-->
  <target name="build-db-userprofile-t1dmine" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.userprofile-production"/>
      <property name="objectstore.name" value="os.userprofile-production"/>
    </ant>
    <antcall target="load-default-templates-t1dmine"/>
  </target>

  <!-- load default global template queries -->
  <target name="load-default-templates-t1dmine" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="insert-default-templates" classname="org.intermine.web.task.LoadDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <insert-default-templates templatesXml="model/genomic/resources/web/t1dmine/template-queries.xml"
                              username="${superuser.account}"
                              osAlias="os.production"
                              userProfileAlias="osw.userprofile-production"/>
  </target>
  <target name="dump-default-templates-t1dmine" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="dump-default-templates" classname="org.intermine.web.task.DumpDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <dump-default-templates fileName="model/genomic/resources/web/t1dmine/template-queries.xml"
                            username="${superuser.account}"
                            osAlias="os.production"
                            userProfileAlias="osw.userprofile-production"/>
  </target>


  <target name="build-production-webapp-t1dmine"
          depends="t1dmine-model-style, build-production-webapp">
  </target>

  <target name ="t1dmine-model-style">
     <property name="model.css.file" value = "model/genomic/resources/web/t1dmine/model.css"/>
     <property name="model.images.dir" value = "model/genomic/resources/web/t1dmine/images"/>
     <property name="webapp.properties.file" value="${resources}/webapp/t1dmine/global.web.properties"/>
     <property name ="web.properties.file" value ="model/genomic/resources/web/t1dmine/web.properties"/>
     <property name ="log4j.properties.file" value ="${resources}/webapp/t1dmine/log4j.properties"/>
  </target>


 <!--=====================STEMCELLMINE==============-->

  <!-- BUILD PRODUCTION DATABASE -->
  <!-- Build genomic model database to hold production data -->
  <target name="build-db-production-stemcell"
          depends="compile-genomic-model-stemcell, copy-stemcell-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
    <antcall target="create-indexes-production"/>
  </target>


   <!-- build production database - assumes that ensembl databases already retrieved -->
  <target name="stemcell-production-build"
          depends="create-production-model-stemcell, compile-genomic-model-stemcell,jar-genomic,
                   build-db-production-stemcell, load-static-stemcell,
                   build-ensembl-human-production,
                   build-go-production-human,build-go-production-mouse,build-orthologues-production-mouse,
                   build-tfbs-production,
                   build-firstef-production,build-mousechain-production, build-opposumchain-production,
                   build-regions-production, build-disease-regions-production, build-ensembl-disease-production,
                   build-gene-synonyms-production,
                   build-tfbscluster-production, build-cns-production,
                   build-mage-stemcell-production, build-cdnaclone-image-production,build-cdnaclone-probeset-production,
                   build-psi-intact-production-stemcell, build-uniprot-hs-production,                  
                   analyse-db-production, grant-db-production"/>

  <target name="build-db-userprofile-stemcell" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.userprofile-production"/>
      <property name="objectstore.name" value="os.userprofile-production"/>
    </ant>
    <antcall target="load-default-templates-stemcell"/>
  </target>

  <!-- load default global template queries for stemcell-->
  <target name="load-default-templates-stemcell" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="insert-default-templates" classname="org.intermine.web.task.LoadDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <insert-default-templates templatesXml="model/genomic/resources/web/stemcellmine/template-queries.xml"
                              username="${superuser.account}"
                              osAlias="os.production"
                              userProfileAlias="osw.userprofile-production"/>
  </target>
  <target name="dump-default-templates-stemcell" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true"
          verbose="true"/>
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="dump-default-templates" classname="org.intermine.web.task.DumpDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <dump-default-templates fileName="model/genomic/resources/web/stemcellmine/template-queries.xml"
                            username="${superuser.account}"
                            osAlias="os.production"
                            userProfileAlias="osw.userprofile-production"/>
  </target>

  <target name="build-production-webapp-stemcell"
          depends="stemcell-model-style, build-production-webapp">
  </target>

  <target name ="stemcell-model-style">
     <property name="model.css.file" value = "model/genomic/resources/web/stemcellmine/model.css"/>
     <property name="webapp.properties.file" value="${resources}/webapp/stemcellmine/global.web.properties"/>
     <property name ="web.properties.file" value ="model/genomic/resources/web/stemcellmine/web.properties"/>
     <property name ="log4j.properties.file" value ="${resources}/webapp/stemcellmine/log4j.properties"/>
     <property name ="aspects.properties.file" value="model/genomic/resources/web/stemcellmine/aspects.xml"/>
     <property name="model.images.dir" value = "model/genomic/resources/web/stemcellmine/images"/>
  </target>

  <!-- insert the testmodel data into the database-->
  <target name="insert-data-unittest"
          depends="build-db-genomic-test-stemcell, create-indexes-genomic-test, ensembl-human-test">
    <taskdef name="insert-xml-data" classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="test.class.path"/>
    </taskdef>
    <insert-xml-data integrationWriter="integration.genomic-test"
         xmlFile="${build}/model/ensembl-human/resources/test/EnsemblDataTranslatorFunctionalTest_tgt.xml"
         sourceName="ensembl-human"/>
  </target>

  <target name="acceptance-tests" depends="prepare">
    <taskdef name="acceptance-tests" classname="org.intermine.task.AcceptanceTestTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <acceptance-tests configFile="model/genomic/resources/test/flymine_acceptance_test.conf"
                      outputFile="results/acceptance_test.html"
                      database="db.production"/>

  </target>

  <target name="acceptance-tests-stemcell" depends="prepare">
    <taskdef name="acceptance-tests" classname="org.intermine.task.AcceptanceTestTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <acceptance-tests configFile="model/genomic/resources/test/stemcell_acceptance_test.conf"
                      outputFile="results/acceptance_test.html"
                      database="db.production"/>

  </target>
</project>

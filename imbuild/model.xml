
<project name="model" default="default" basedir="." xmlns:model="http://www.intermine.org/ns/im-model-proj/1">

  <dirname property="model.xml.basedir" file="${ant.file.model}"/>

  <property name="generating.code" value="true"/>

  <import file="${model.xml.basedir}/library.xml"/>
  <import file="${model.xml.basedir}/task.xml"/>

  <target name="-pre-init" depends="library.-pre-init">
    <!-- Model specific -->
    <property name="model.name" value="${ant.project.name}"/>
    <property name="namespace" value="http://www.intermine.org/model"/>
    <property name="packagename" value="org.intermine.model"/>
    <!-- Make directories -->
    <mkdir dir="${build.model.dir}"/>
  </target>

  <!-- CODE GENERATION -->

  <target name="unpack-xmi-model">
    <unzip src="${model.name}.zargo" dest="${build.dir}">
      <patternset>
        <include name="${model.name}_.xmi"/>
      </patternset>
    </unzip>
    <touch file="${build.dir}/${model.name}_.xmi" />
  </target>

  <target name="-generate-model-java-message" unless="regenerate.java">
    <echo message="generated model java is up to date - not regenerating"/>
  </target>

  <target name="generate-model-java" if="regenerate.java" depends="-init-macrodef-model-output">
    <model:model-output/>
  </target>

 <target name="build-model-from-zargo" if="have.zargo">
    <echo>Found zargo file</echo>
    <model:modeloutofdate source="${model.name}.zargo">
      <then>
        <runtarget target="unpack-xmi-model"/>
        <model:model-generation type="xmi" source="${build.dir}/${model.name}_.xmi"/>
        <!--antcall target="copy-keydefs"/-->
        <property name="regenerate.java" value="true"/>
      </then>
    </model:modeloutofdate>
  </target>

  <target name="build-model-from-xmi" if="have.xmi">
    <echo>Found xmi file</echo>
    <model:modeloutofdate source="${model.name}.xmi">
      <then>
        <copy file="${model.name}.xmi" tofile="${build.task.dir}/${model.name}_.xmi"/>
        <model:model-generation type="xmi" source="${build.task.dir}/${model.name}_.xmi"/>
        <!--antcall target="copy-keydefs"/-->
        <property name="regenerate.java" value="true"/>
      </then>
    </model:modeloutofdate>
  </target>

  <target name="build-model-from-xml-in-project-dir" if="have.xml.in.project.dir">
    <echo>Found xml file in project directory</echo>
    <model:modeloutofdate source="${model.name}_model.xml">
      <then>
        <copy file="${model.name}_model.xml" tofile="${build.task.dir}/${model.name}_model.xml"/>
        <!--antcall target="copy-keydefs"/-->
        <property name="regenerate.java" value="true"/>
      </then>
    </model:modeloutofdate>
  </target>

  <target name="build-model-from-xml-in-build-dir" if="have.xml.in.build.dir">
    <echo>Found xml file in ${build.dir}</echo>
    <model:modeloutofdate source="${build.model.dir}/${model.name}_model.xml">
      <then>
        <outofdate>
          <sourcefiles path="${build.model.dir}/${model.name}_model.xml"/>
          <targetfiles path="${build.task.dir}/${model.name}_model.xml"/>
          <sequential>
            <property name="regenerate.java" value="true"/>
            <copy file="${build.model.dir}/${model.name}_model.xml"
                  tofile="${build.task.dir}/${model.name}_model.xml"/>
          </sequential>
        </outofdate>
      </then>
    </model:modeloutofdate>
  </target>

  <target name="build-model-from-xmlschema" if="have.xmlschema">
    <echo>Found xml-schema file</echo>
    <model:modeloutofdate source="${model.name}.xsd">
      <then>
        <model:model-generation type="xmlschema" source="${model.name}.xsd"/>
        <!--antcall target="copy-keydefs"/-->
        <property name="regenerate.java" value="true"/>
      </then>
    </model:modeloutofdate>
  </target>

  <target name="-init-generate" depends="library.-init-generate, -init-task-xml, -init-model-out-of-date, -init-macrodef-model-generation">
    <!-- Conditions -->
    <available file="${model.name}.zargo" property="have.zargo"/>
    <available file="${model.name}_model.xml" property="have.xml.in.project.dir"/>
    <available file="${build.model.dir}/${model.name}_model.xml" property="have.xml.in.build.dir"/>
    <available file="${model.name}.xsd" property="have.xmlschema"/>
    <available file="${model.name}_additions.xml" property="have.additions"/>
  </target>

  <target name="do-generate" depends="build-model-from-xml-in-build-dir,
                                      build-model-from-xml-in-project-dir,
                                      build-model-from-xmi,
                                      build-model-from-zargo,
                                      build-model-from-xmlschema,
                                      -generate-model-java-message,
                                      generate-model-java"/>

  <!-- OVERRIDEN TO ADD MODEL XML TO JAR -->

  <target name="-init-presetdef-jar">
    <presetdef name="jar" uri="http://www.intermine.org/ns/im-lib-proj/1">
      <jar compress="${jar.compress}" jarfile="${dist.jar}">
        <fileset dir="${build.classes.dir}"/>
        <fileset dir="${resources.dir}"/>
        <fileset file="${build.task.dir}/${model.name}_model.xml"/>
      </jar>
    </presetdef>
  </target>

  <!-- MACRO DEFINITION -->

  <target name="-init-macrodef-model-output">
    <macrodef name="model-output" uri="http://www.intermine.org/ns/im-model-proj/1">
      <sequential>
        <echo>Generating model java code...</echo>
        <model-output type="java" model="${model.name}" destdir="${gen.src.dir}"/>
      </sequential>
    </macrodef>
  </target>

  <target name="-init-macrodef-model-generation">
    <macrodef name="model-generation" uri="http://www.intermine.org/ns/im-model-proj/1">
      <attribute name="type"/>
      <attribute name="source"/>
      <sequential>
        <echo>Generating model...</echo>
        <model-generation type="@{type}"
                          modelName="${model.name}"
                          nameSpace="${namespace}"
                          pkg="${packagename}.${model.name}"
                          source="@{source}"
                          destDir="${build.task.dir}"/>
      </sequential>
    </macrodef>
  </target>

  <target name="-init-model-out-of-date">
    <macrodef name="modeloutofdate" uri="http://www.intermine.org/ns/im-model-proj/1">
      <attribute name="source"/>
      <element name="then" optional=""/>
      <sequential>
        <outofdate>
          <sourcefiles path="@{source}"/>
          <targetfiles>
            <fileset dir="${gen.src.dir}" includes="**/*.java"/>
          </targetfiles>
          <sequential>
            <then/>
          </sequential>
        </outofdate>
      </sequential>
    </macrodef>
  </target>

  <!-- exist so that default can be overridden -->
  <target name="default" depends="library.default"/>

</project>

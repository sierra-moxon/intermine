<project name="InterMine model" default="all" basedir=".">
  <description>InterMine model build file</description>

  <!--
  The following properties are used in this file:

  model.name: the name of the model
  model: the directory containing model information
  class.path: the classpath to use
  db.name: the name of the database to build, if actually building the schema
  objectstore.name: the name of the objectstore to access
  build.model: the location of the model build directory
  build.tmp: the location to store temporary files
  resources: the location of any static resource files
  namespace: the namespace to use when processing XML model files
  packagename: the packagename to use for the generated classes
  create.attribute.indexes: flag for create-indexes to choose to build the indexes
                       on attributes instead of the standard indexes
  -->

  <property name="build.model.dir" location="${build.model}/${model.name}"/>
  <property name="build.model.dir.tmp" location="${build.model.dir}/tmp"/>
  <property name="build.model.dir.tmp.builddb" location="${build.model.dir.tmp}/builddb"/>
  <property name="build.model.dir.resources" location="${build.model.dir}/resources"/>
  <property name="model.lib" location="${model}/${model.name}/lib"/>
  <property name="model.web.template.queries" location="${model}/${model.name}/resources/web/template-queries.xml"/>
  <property name="model.mapping" location="${model}/${model.name}/${model.name}_mappings"/>
  
  <!-- Summarise object store properties -->
  <property name="os.summary.properties.file"
            value="${build.model.dir}/objectstoresummary.config.properties" />
  <property name="summarise.output.properties.filename" value="objectstoresummary.properties"/>
  <property name="summarise.output.properties"
            value="${build.model.dir}/${summarise.output.properties.filename}"/>


  <path id="compile.class.path">
    <path refid="class.path"/>
    <fileset dir="${model.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="test.class.path">
    <pathelement location="${build.model.dir.resources}/test"/>
    <path refid="compile.class.path"/>
    <pathelement location="${build.model.dir.tmp}"/>
    <pathelement location="${build.model.dir.resources}"/>
  </path>


  <!-- object store summary targets -->
  <target name="check-objectstore-summary">
    <uptodate property="objectstore-is-summarised"
              srcfile="${os.summary.properties.file}"
              targetfile="${summarise.output.properties}"/>
  </target>

  <target name="summarise-objectstore" depends="prepare, check-objectstore-summary, build-model-from-db" unless="objectstore-is-summarised">
    <taskdef name="summarise-objectstore" classname="org.intermine.task.SummariseObjectStoreTask">
      <classpath refid="class.path"/>
    </taskdef>
    <echo message="Summarising object store ${objectstore.name}..."/>
    <summarise-objectstore alias="${objectstore.name}"
                           outputFile="${summarise.output.properties}"
                           inputFile="${os.summary.properties.file}"/>
  </target>

  <!-- create the directory that this model will be built to -->
  <target name="prepare"
          description="Create a directory that this model will be built to">
    <mkdir dir="${build.model.dir}" />
    <mkdir dir="${build.model.dir.resources}" />
    <mkdir dir="${build.model.dir.tmp}" />
    <mkdir dir="${build.model.dir.tmp.builddb}" />
  </target>

  <!-- has .zargo been unzipped? -->
  <target name="unpack-xmi-model.check" depends="prepare">
    <uptodate property="unpack-xmi-model.uptodate">
      <srcfiles dir="${model}/${model.name}" includes="${model.name}.zargo" />
      <mapper type="glob" from="*.zargo" to="${build.model.dir.tmp}/*_.xmi" />
    </uptodate>
  </target>

  <!-- unzip .zargo file -->
  <target name="unpack-xmi-model" depends="unpack-xmi-model.check"
          description="unpacks an XMI model from .zargo file"
          unless="unpack-xmi-model.uptodate">
    <unzip src="${model}/${model.name}/${model.name}.zargo" dest="${build.model.dir.tmp}">
      <patternset>
        <include name="${model.name}_.xmi"/>
      </patternset>
    </unzip>
    <touch file="${build.model.dir.tmp}/${model.name}_.xmi" />
  </target>

  <!-- copy an exiting xmi file to build/tmp -->
  <target name="copy-xmi" depends="prepare">
    <copy file="${model}/${model.name}/${model.name}.xmi" tofile="${build.model.dir.tmp}/${model.name}_.xmi"/>
  </target>

  <!-- copy intermine xml model file to build model directory -->
  <target name="copy-xml-model" depends="prepare">
    <copy todir="${build.model.dir}" file="${model}/${model.name}/${model.name}_model.xml"/>
  </target>

  <!-- copy key definition files -->
  <target name="copy-keydefs" depends="prepare">
    <copy todir="${build.model.dir}" failonerror="false">
      <fileset dir="${model}/${model.name}/resources">
        <include name="*.properties"/>
        <include name="*.sql"/>
      </fileset>
    </copy>
  </target>

  <!-- copy test resources -->
  <target name="copy-test-resources" depends="prepare">
    <copy todir="${build.model.dir.resources}">
      <fileset dir="${model}/${model.name}/resources"/>
    </copy>
  </target>

  <!-- Model generation targets -->
  <target name="generate-xmi-model"
          description="Generate InterMine model from an XMI file">
    <!-- if from ArgoUML the XMI filename will have a trailing underscore -->
    <taskdef name="model-generation" classname="org.intermine.modelproduction.ModelGenerationTask">
      <classpath refid="class.path"/>
    </taskdef>
    <model-generation type="xmi"
                      modelName="${model.name}"
                      namespace="${namespace}"
                      pkg="${packagename}.${model.name}"
                      source="${build.model.dir.tmp}/${model.name}_.xmi"
                      destDir="${build.model.dir}"/>
  </target>

  <target name="generate-xmlschema-model" depends="prepare"
          description="Generate InterMine model from an XML Schema">
    <taskdef name="model-generation" classname="org.intermine.modelproduction.ModelGenerationTask">
      <classpath refid="class.path"/>
    </taskdef>
    <model-generation type="xmlschema"
                      modelName="${model.name}"
                      pkg="${packagename}.${model.name}"
                      namespace="${namespace}/${model.name}"
                      source="${model}/${model.name}/${model.name}.xsd"
                      destDir="${build.model}/${model.name}" />
  </target>

  <target name="generate-owl-model"
          description="Generate InterMine model from an OWL file">
    <copy file="${model}/${model.name}/${model.name}.n3"
          todir="${build.model.dir}"
          overwrite="false"/>
    <java classname="org.intermine.ontology.Owl2InterMine" fork="true" maxmemory="800m">
      <classpath refid="class.path" />
      <arg value="${build.model.dir}/${model.name}.n3" />
      <arg value="N3" />
      <arg value="${build.model.dir}/${model.name}_model.xml" />
      <arg value="genomic" />
      <arg value="${packagename}.${model.name}" />
      <arg value="${namespace}/${model.name}#" />
    </java>
  </target>

  <target name="generate-acedb-model" depends="prepare"
          description="Generate a InterMine model file from an AceDB model file">
    <taskdef name="model-generation" classname="org.intermine.modelproduction.ModelGenerationTask">
      <classpath refid="class.path"/>
    </taskdef>
    <model-generation type="acedb"
                      modelName="${model.name}"
                      pkg="${packagename}.${model.name}"
                      nameSpace="${namespace}/${model.name}#"
                      source="${model}/${model.name}/${model.name}.wrm"
                      destDir="${build.model.dir}"/>
  </target>

  <!-- Code generation targets -->
  <target name="generate-model-java" depends="prepare"
          description="Generate Java files from a InterMine model file">
    <taskdef name="model-output" classname="org.intermine.task.ModelOutputTask">
      <classpath refid="class.path" />
    </taskdef>
    <model-output type="java" model="${model.name}" destdir="${build.model.dir}"/>
  </target>

  <target name="compile-model-java" depends="generate-model-java">
    <javac source="1.4" destdir="${build.model.dir}" listfiles="yes"
           debuglevel="lines,vars,source" debug="on">
      <classpath refid="class.path"/>
      <src path="${build.model.dir}" />
    </javac>
  </target>

  <target name="compile-java" depends="prepare">
    <javac source="1.4" destdir="${build.model.dir}" listfiles="yes"
           debuglevel="lines,vars,source" debug="on">
      <classpath refid="compile.class.path"/>
      <src path="${model}/${model.name}/src/java"/>
    </javac>
  </target>

  <target name="compile-webapp-java" depends="prepare">
    <javac source="1.4" destdir="${build.model.dir}" listfiles="yes"
           debuglevel="lines,vars,source" debug="on">
      <classpath refid="compile.class.path"/>
      <src path="${model}/${model.name}/src/web/java"/>
    </javac>
    <copy todir="${build.model.dir}">
      <fileset dir="${model}/${model.name}/src/web/java" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="compile-test" depends="compile-java, copy-test-resources">
    <depend srcdir="${model}/${model.name}/src/test" destdir="${build.model.dir.tmp}"
            closure="yes" dump="yes">
      <classpath>
        <pathelement path="${build.model.dir}"/>
      </classpath>
    </depend>
    <javac source="1.4" destdir="${build.model.dir.tmp}/" listfiles="yes"
           debuglevel="lines,vars,source" debug="on">
      <classpath refid="compile.class.path"/>
      <src path="${model}/${model.name}/src/test"/>
    </javac>
  </target>

  <target name="test-java" depends="compile-test">
    <copy file="${model.mapping}" toDir="${build.model.dir}" failonerror="false"/>
    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
    <sysproperty key="java.awt.headless" value="true"/>
      <formatter type="xml" />
      <classpath refid="test.class.path"/>
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.model.dir.tmp}" includes="**/*Test.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="build-db" description="Build database tables from a Torque description">
    <!-- clean the directory so that torque doesn't find any files from the
         last execution of this target -->
    <delete dir="${build.model.dir.tmp.builddb}"/>
    <mkdir dir="${build.model.dir.tmp.builddb}"/>
    <taskdef name="build-torque" classname="org.intermine.objectstore.intermine.TorqueModelOutputTask">
      <classpath refid="class.path"/>
    </taskdef>
    <build-torque osName="${objectstore.name}"
                  destFile="${build.model.dir}/${objectstore.name}-schema.xml"/>
    <taskdef name="build-db" classname="org.intermine.task.BuildDbTask">
      <classpath refid="class.path"/>
    </taskdef>
    <build-db database="${db.name}"
              tempdir="${build.model.dir.tmp.builddb}"
              schemafile="${objectstore.name}-schema.xml">
    </build-db>

    <taskdef name="db-insert-model"
             classname="org.intermine.task.StoreMetadataTask">
      <classpath refid="class.path"/>
    </taskdef>
    <db-insert-model database="${db.name}" modelName="${model.name}"/>
  </target>

  <target name="analyse-db">
    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
      <classpath refid="class.path"/>
    </taskdef>
    <analyse-db database="${db.name}"/>
  </target>

  <target name="retrieve-metadata" depends="prepare">
    <taskdef name="retrieve-metadata" classname="org.intermine.task.RetrieveMetadataTask">
      <classpath refid="class.path"/>
    </taskdef>
    <retrieve-metadata database="${db.name}" destDir="${build.model.dir}"/>
  </target>

  <!-- Targets that could be called from another build script -->
  <target name="generate-model-from-zargo"
          depends="unpack-xmi-model, generate-xmi-model, copy-keydefs"
          description="Generate a InterMine xml model from a .zargo file">
  </target>

  <target name="generate-model-from-xmi"
          depends="copy-xmi, generate-xmi-model, copy-keydefs"
          description="Generate a InterMine xml model from a xmi file">
  </target>

  <target name="generate-model-from-xmlschema"
          depends="generate-xmlschema-model, copy-keydefs"
          description="Build a usable model from an xmlschema">
  </target>

  <target name="generate-model-from-owl"
          depends="generate-owl-model, copy-keydefs"
          description="Generate a InterMine xml model from an OWL file">
  </target>

  <target name="build-model-from-xml"
          depends="copy-xml-model, compile-model-java, copy-keydefs"
          description="Build a usable model from a InterMine model XML file">
  </target>

  <target name="build-model-from-zargo" depends="generate-model-from-zargo, compile-model-java"
          description="Build a usable model from a .zargo file">
  </target>

  <target name="build-model-from-ace"
          depends="generate-acedb-model, compile-model-java, copy-keydefs"
          description="Build a usable model from an AceDB .wrm file">
  </target>

  <target name="build-model-from-db"
          depends="retrieve-metadata, compile-model-java, copy-keydefs"
          description="Build model from description stored in database"/>

  <target name="jar" description="create a jar of a model">
    <jar destfile="${dist}/intermine-${model.name}.jar">
      <fileset dir="${build.model.dir}" >
        <exclude name="**/*.java"/>
        <exclude name="**/web/*.java"/>
      </fileset>
    </jar>
  </target>

  <target name="create-indexes" depends="copy-keydefs">
    <taskdef name="create-indexes" classname="org.intermine.task.CreateIndexesTask">
      <classpath refid="class.path"/>
    </taskdef>
    <create-indexes alias="${os.alias}" attributeIndexes="${create.attribute.indexes}"/>
  </target>

  <target name="precompute-model" depends="compile-java, summarise-objectstore">
    <taskdef name="precompute-queries" classname="org.intermine.task.PrecomputeTask">
      <classpath refid="class.path"/>
    </taskdef>
    <precompute-queries alias="${objectstore.name}"
                        minRows="${precompute.minRows}"/>
  </target>

  <target name="precompute-model-test" depends="compile-java, summarise-objectstore">
    <taskdef name="precompute-queries" classname="org.intermine.task.PrecomputeTask">
      <classpath refid="class.path"/>
    </taskdef>
    <precompute-queries alias="${objectstore.name}" testMode="true"
                        minRows="${precompute.minRows}"/>
  </target>

  <target name="precompute-templates" depends="compile-java, summarise-objectstore">
    <copy file="${model.web.template.queries}" toDir="${build.model.dir}"/>
    <taskdef name="precompute-templates" classname="org.intermine.web.task.PrecomputeTemplatesTask">
      <classpath refid="class.path"/>
    </taskdef>
    <precompute-templates alias="${objectstore.name}" minRows="${precompute.minRows}" 
                          userprofilealias="${userprofile.name}" username="${username}"/>
  </target>

  <target name="add-model-to-webapp" depends="summarise-objectstore, compile-webapp-java"
          description="Add a model to the webapp">
    <loadfile property="model.struts.config" srcFile="${model}/${model.name}/resources/web/struts-config-model.xml"/>
    <copy file="../intermine/webapp/main/resources/web-inf/struts-config.xml"
          todir="${build.tmp}/WEB-INF/" overwrite="true"/>
    <!--<unwar src="${war}" dest="${build.tmp}">
      <patternset>
        <include name="**/struts-config.xml"/>
      </patternset>
    </unwar>-->
    <replace file="${build.tmp}/WEB-INF/struts-config.xml" value="${model.struts.config}">
      <!-- can't use normal token as xml must be parseable before this replacement -->
      <replacetoken><![CDATA[<!--@MODEL_INCLUDE@-->]]></replacetoken>
    </replace>
    <mkdir dir="${build.webapp}/intermine/"/>
    <copy todir="${build.webapp}/intermine/model" failonerror="false" >
      <fileset dir="${model}/${model.name}/src/web/jsp"/>
      <fileset dir="${model}/${model.name}/src/web/images"/>
      <fileset file="${model.css.file}"/>
      <fileset dir="${model.images.dir}"/>
    </copy>
    <!-- Make a copy in order to rename file -->
    <copy file="${runtime.properties.local}" toFile="${build.tmp}/WEB-INF/intermine.properties"/>
    <war destfile="${war}" update="true">
      <fileset dir="${build.webapp}/intermine" includes="model/**/*" excludes="*.properties"/>
      <webinf file="${build.tmp}/WEB-INF/struts-config.xml"/>
      <webinf dir="${model}/${model.name}/resources/web" excludes="model.properties"/>
      <classes file="${model}/${model.name}/resources/web/model.properties"/>
      <classes file="${build.tmp}/WEB-INF/intermine.properties" />
      <classes dir="${build.model}/${model.name}"/>
      <lib dir="${model.lib}"/>   
 </war>
  </target>

  <target name="dot">
    <taskdef name="dot" classname="org.intermine.task.InheritanceDotTask">
      <classpath refid="class.path"/>
    </taskdef>
    <dot directory="${build.model}/${model.name}"
         packagename="org.flymine.model.${model.name}"
         file="${model.name}.dot"
         omit="org.intermine.model.InterMineObject,java.lang.Object"
         boring=""/>
  </target>
</project>
